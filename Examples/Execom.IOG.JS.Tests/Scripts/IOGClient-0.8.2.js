// Generated by CoffeeScript 1.3.3
(function() {
  var namespace,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  namespace = function(target, name, block) {
    var item, top, _i, _len, _ref, _ref1;
    if (arguments.length < 3) {
      _ref = [(typeof exports !== 'undefined' ? exports : window)].concat(__slice.call(arguments)), target = _ref[0], name = _ref[1], block = _ref[2];
    }
    top = target;
    _ref1 = name.split('.');
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      item = _ref1[_i];
      target = target[item] || (target[item] = {});
    }
    return block(target, top);
  };

  namespace("execom.iog", function(exports) {
    exports.name = "execom.iog";
    return $(document).ready(function() {
      $.connection.hub.logging = true;
      $.connection.sendEvent = function(args) {
        return console.log(args);
      };
      $.connection.eventsHub.sendEvent = function(args) {
        var argsObj;
        console.log(args);
        argsObj = JSON.parse(args);
        return exports.events.trigger(argsObj.Subscription.SubscriptionId, argsObj);
      };
      return $.connection.hub.start({
        transport: ['webSockets', 'longPolling']
      }).done(function() {
        return console.log("Now connected! Client ID: " + $.connection.hub.id);
      }).fail(function() {
        return console.log("Could not Connect!");
      });
    });
  });

  namespace(execom.iog.name, function(exports) {
    return exports.IOGSettings = {
      ObjectCacheMinimumCount: 50000,
      ObjectCacheMaximumCount: 100000
    };
  });

  String.prototype.GetHashcode = function() {
    var charachter, hash, index, len, _i, _len;
    hash = 0;
    len = this.length;
    if (this.length === 0) {
      return hash;
    }
    for (index = _i = 0, _len = this.length; _i < _len; index = ++_i) {
      charachter = this[index];
      hash = ((hash << 5) - hash) + charachter;
      hash = hash & hash;
    }
    return hash;
  };

  Array.prototype.compare = function(testArray) {
    var element, i, _i, _len;
    if (this.length !== testArray.length) {
      return false;
    }
    for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
      element = this[i];
      if (typeof element === "Array") {
        if (!element.compare(testArray[i])) {
          return false;
        }
      }
      if (element !== testArray[i]) {
        return false;
      }
    }
    return true;
  };

  String.prototype.compareTo = function(other) {
    var char, index, otherType, _i, _len;
    otherType = typeof other;
    if (otherType !== "string") {
      throw "Cannot compare this two objects!";
    }
    for (index = _i = 0, _len = this.length; _i < _len; index = ++_i) {
      char = this[index];
      if (other[index] === char) {
        continue;
      } else {
        if (other[index] < char) {
          return 1;
        } else {
          return -1;
        }
      }
    }
    return 0;
  };

  /*
  Number::compareTo = (other) ->
    x = new Number(other)
    y = new Number(this)
  
    if(isNaN(x) or isNaN(y))
      throw "One of objects are not number!"
  
    if this.valueOf() < other.valueOf()
      return -1
    else
      if this.valueOf() > other.valueOf()
        return 1
  
    return 0
    
  Number::equals = (other)->
    x = new Number(other)
    y = new Number(this)
  
    if(isNaN(x) or isNaN(y))
      throw "One of objects are not number!"
  
    if other.valueOf() == this.valueOf()
      return true
  
    return false
  */


  namespace(execom.iog.name, function(exports) {
    DateTime.prototype.toJSON = function() {
      var json;
      json = {};
      json[exports.IOGJsonConstatns.IOG_TYPE] = exports.DateTimeType;
      json[exports.IOGJsonConstatns.VALUE] = this.span._millis;
      return json;
    };
    DateTime.prototype.toDate = function() {
      return new Date(this.year(), this.month() - 1, this.day(), this.hour(), this.minute(), this.second(), this.millisecond());
    };
    return TimeSpan.prototype.toJSON = function() {
      var json;
      json = {};
      json[exports.IOGJsonConstatns.IOG_TYPE] = exports.TimeSpanType;
      json[exports.IOGJsonConstatns.VALUE] = this._millis;
      return json;
    };
  });

  namespace(execom.iog.name, function(exports) {
    return exports.Dictionary = (function() {

      function Dictionary(array) {
        this.array = array != null ? array : [];
      }

      Dictionary.prototype.Add = function(key, value) {
        var i, item, kv, _i, _len, _ref;
        _ref = this.array;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          kv = _ref[i];
          if (exports.UTILS.equals(kv.key, key)) {
            throw 'Key already exists!';
          }
        }
        item = new exports.KeyValuePair(key, value);
        this.array.push(item);
      };

      Dictionary.prototype.Set = function(key, value) {
        var i, kv, _i, _len, _ref;
        _ref = this.array;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          kv = _ref[i];
          if (exports.UTILS.equals(kv.key, key)) {
            this.array[i].value = value;
          }
        }
      };

      Dictionary.prototype.Remove = function(key) {
        var i, kv, tempArray, _i, _len, _ref;
        _ref = this.array;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          kv = _ref[i];
          if (exports.UTILS.equals(kv.key, key)) {
            if (i === 0) {
              this.array = this.array.slice(1, this.array.length);
            } else {
              if (i === this.array.length - 1) {
                this.array = this.array.slice(0, this.array.length - 1);
              } else {
                tempArray = this.array.slice(0, i);
                this.array = this.array.slice(i + 1, this.array.length);
                this.array = tempArray.concat(this.array);
              }
            }
            return true;
          }
        }
        return false;
      };

      Dictionary.prototype.Contains = function(key) {
        var i, index, kv, _i, _len, _ref;
        index = -1;
        _ref = this.array;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          kv = _ref[i];
          if (exports.UTILS.equals(kv.key, key)) {
            return true;
          }
        }
        return false;
      };

      Dictionary.prototype.IndexOf = function(key) {
        var i, index, kv, _i, _len, _ref;
        index = -1;
        _ref = this.array;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          kv = _ref[i];
          if (exports.UTILS.equals(kv.key, key)) {
            index = i;
            return index;
          }
        }
        return index;
      };

      Dictionary.prototype.Get = function(key) {
        var i, kv, _i, _len, _ref;
        _ref = this.array;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          kv = _ref[i];
          if (exports.UTILS.equals(kv.key, key)) {
            return this.array[i].value;
          }
        }
        return null;
      };

      Dictionary.prototype.Array = function() {
        var kv, rez, _i, _len, _ref;
        rez = [];
        _ref = this.array;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          kv = _ref[_i];
          rez.push(kv.value);
        }
        return rez;
      };

      Dictionary.prototype.Length = function() {
        return this.array.length;
      };

      Dictionary.prototype.Clear = function() {
        this.array = [];
      };

      Dictionary.prototype.Keys = function() {
        var kv, rez, _i, _len, _ref;
        rez = [];
        _ref = this.array;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          kv = _ref[_i];
          rez.push(kv.key);
        }
        return rez;
      };

      return Dictionary;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.ScalarName = {
      Boolean: "Boolean",
      Int32: "Int32",
      Int64: "Int64",
      Double: "Double",
      String: "String",
      Char: "Char",
      Byte: "Byte",
      DateTime: "DateTime",
      TimeSpan: "TimeSpan",
      Guid: "Guid"
    };
  });

  namespace(execom.iog.name, function(exports) {
    exports.IOGType = (function() {

      IOGType.NAME = "name";

      IOGType.IOG_TYPE = "iogType";

      function IOGType(id, name, isCollectionType, isDictionaryType, isInterface, isEnum, isGenericType, genericType, customAttributes, properties, interfaces, enumValues, genericArguments, isScalar) {
        this.id = id;
        this.name = name;
        this.isCollectionType = isCollectionType;
        this.isDictionaryType = isDictionaryType;
        this.isInterface = isInterface;
        this.isEnum = isEnum;
        this.isGenericType = isGenericType;
        this.genericType = genericType;
        this.customAttributes = customAttributes;
        this.properties = properties != null ? properties : [];
        this.interfaces = interfaces != null ? interfaces : [];
        this.enumValues = enumValues != null ? enumValues : [];
        this.genericArguments = genericArguments != null ? genericArguments : [];
        this.isScalar = isScalar != null ? isScalar : false;
      }

      IOGType.prototype.GetCustomAttributes = function(name) {
        var attr, attributes, rezBoolean, _i, _len, _ref;
        attributes = [];
        rezBoolean = false;
        _ref = this.customAttributes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          attr = _ref[_i];
          if (attr.name === name) {
            rezBoolean = true;
            attributes.push(attr);
          }
        }
        return {
          result: rezBoolean,
          value: attributes
        };
      };

      IOGType.CopyConstructor = function(iogType) {
        if (iogType instanceof IOGType) {
          return new IOGType(iogType.id, iogType.name, iogType.isCollectionType, iogType.isDictionaryType, iogType.isInterface, iogType.isEnum, iogType.isGenericType, iogType.genericType, iogType.customAttributes, iogType.properties, iogType.interfaces, iogType.enumValues, iogType.GenericArguments, iogType.isScalar);
        }
      };

      IOGType.prototype.GetProperty = function(name) {
        var prop, _i, _len;
        for (_i = 0, _len = properties.length; _i < _len; _i++) {
          prop = properties[_i];
          if (prop.name === name) {
            return prop;
          }
        }
        return null;
      };

      IOGType.CreateScalar = function(type, value) {
        var enumObject, tempRez;
        if (IOGType.CheckValue(type, value)) {
          return value;
        }
        if (!type.isScalar && !type.isEnum) {
          return null;
        }
        if (type.isEnum) {
          enumObject = exports.typeToEnums.Get(type);
          if (value instanceof exports.IOGEnumLiteral) {
            if (value.enumeration.equals(enumObject)) {
              return value;
            } else {
              throw "Wrong enumeration!";
            }
          } else {
            if ((enumObject[value] != null)) {
              return enumObject[value] != null;
            } else {
              return enumObject.first;
            }
          }
        }
        switch (type.name) {
          case exports.ScalarName.Guid:
            tempRez = new exports.Guid(value);
            return tempRez;
          case exports.ScalarName.String:
            tempRez = new exports.IOGString(value);
            return tempRez;
          case exports.ScalarName.Boolean:
            tempRez = new exports.IOGBoolean(value);
            return tempRez;
          case exports.ScalarName.Byte:
            tempRez = new exports.Byte(value);
            return tempRez;
          case exports.ScalarName.Char:
            tempRez = new exports.Char(value);
            return tempRez;
          case exports.ScalarName.DateTime:
            if (value instanceof DateTime) {
              tempRez = value;
            } else {
              tempRez = new DateTime(value);
            }
            tempRez[IOGType.IOG_TYPE] = exports.DateTimeType;
            return tempRez;
          case exports.ScalarName.Double:
            tempRez = new exports.Double(value);
            return tempRez;
          case exports.ScalarName.Int32:
            tempRez = new exports.Int32(value);
            return tempRez;
          case exports.ScalarName.Int64:
            tempRez = new exports.Int64(value);
            return tempRez;
          case exports.ScalarName.TimeSpan:
            if (value instanceof TimeSpan) {
              tempRez = value;
            } else {
              tempRez = new TimeSpan(value);
            }
            tempRez[IOGType.IOG_TYPE] = exports.TimeSpanType;
            return tempRez;
          default:
            throw "Type is not scalar!";
        }
      };

      IOGType.CheckValue = function(type, value) {
        if ((value instanceof exports.IOGBaseType || value instanceof DateTime || value instanceof TimeSpan) && exports.UTILS.equals(value.iogType, type)) {
          return true;
        } else {
          return false;
        }
      };

      IOGType.FindScalar = function(type) {
        if (!type.isScalar) {
          return null;
        }
        switch (type.name) {
          case exports.ScalarName.Guid:
            exports.GuidType = type;
            break;
          case exports.ScalarName.String:
            exports.StringType = type;
            break;
          case exports.ScalarName.Boolean:
            exports.BooleanType = type;
            break;
          case exports.ScalarName.Byte:
            exports.ByteType = type;
            break;
          case exports.ScalarName.Char:
            exports.CharType = type;
            break;
          case exports.ScalarName.DateTime:
            exports.DateTimeType = type;
            break;
          case exports.ScalarName.Double:
            exports.DoubleType = type;
            break;
          case exports.ScalarName.Int32:
            exports.Int32Type = type;
            break;
          case exports.ScalarName.Int64:
            exports.Int64Type = type;
            break;
          case exports.ScalarName.TimeSpan:
            exports.TimeSpanType = type;
            break;
          default:
            throw "Type is not scalar!";
        }
      };

      IOGType.FindType = function(name) {
        var type, _i, _len, _ref;
        _ref = exports.types;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          type = _ref[_i];
          if (type.name === name) {
            return type;
          }
        }
        return null;
      };

      IOGType.prototype.AddGenericArgument = function(type, clear) {
        var genericArguments;
        if ((clear != null) && clear === true) {
          genericArguments = [];
        }
        return genericArguments.push(type);
      };

      IOGType.prototype.ClearGenericArguments = function() {
        var genericArguments;
        return genericArguments = [];
      };

      IOGType.CreateCollectionWithGenericType = function(type) {
        var newCollection;
        newCollection = IOGType.CopyConstructor(exports.ArrayType);
        newCollection.ClearGenericArguments();
        newCollection.genericArguments.push(type);
        return newCollection;
      };

      IOGType.CreateDictionaryWithGenericTypes = function(type1, type2) {
        var newCollection;
        newCollection = IOGType.CopyConstructor(exports.DictionaryType);
        newCollection.ClearGenericArguments();
        newCollection.genericArguments.push(type1);
        newCollection.genericArguments.push(type2);
        return newCollection;
      };

      return IOGType;

    })();
    exports.IOGType.prototype.toJSON = function() {
      var json;
      json = {};
      json[exports.IOGType.NAME] = this.name;
      return json;
    };
    return exports.IOGType.prototype.equals = function(other) {
      return exports.UTILS.equals(this, other);
    };
  });

  namespace(execom.iog.name, function(exports) {
    exports.TypeProxy = (function() {

      function TypeProxy(nameOfType, genericArgumentsName) {
        this.nameOfType = nameOfType;
        this.genericArgumentsName = genericArgumentsName != null ? genericArgumentsName : [];
      }

      TypeProxy.prototype.GetType = function() {
        var argument, type, _i, _len, _ref;
        type = exports.IOGType.FindType(this.nameOfType);
        type = exports.IOGType.CopyConstructor(type);
        type.ClearGenericArguments();
        _ref = this.genericArgumentsName;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          argument = _ref[_i];
          type.genericArguments.push(argument.GetType());
        }
        return type;
      };

      return TypeProxy;

    })();
    exports.BooleanType = new exports.IOGType(UUID.create(), exports.ScalarName.Boolean, false, false, false, false, false, null, []);
    exports.StringType = new exports.IOGType(UUID.create(), exports.ScalarName.String, false, false, false, false, false, null, []);
    exports.Int32Type = new exports.IOGType(UUID.create(), exports.ScalarName.Int32, false, false, false, false, false, null, []);
    exports.Int64Type = new exports.IOGType(UUID.create(), exports.ScalarName.Int64, false, false, false, false, false, null, []);
    exports.DoubleType = new exports.IOGType(UUID.create(), exports.ScalarName.Double, false, false, false, false, false, null, []);
    exports.DateTimeType = new exports.IOGType(UUID.create(), exports.ScalarName.DateTime, false, false, false, false, false, null, []);
    exports.GuidType = new exports.IOGType(UUID.create(), exports.ScalarName.Guid, false, false, false, false, false, null, []);
    exports.TimeSpanType = new exports.IOGType(UUID.create(), exports.ScalarName.TimeSpan, false, false, false, false, false, null, []);
    exports.ByteType = new exports.IOGType(UUID.create(), exports.ScalarName.Byte, false, false, false, false, false, null, []);
    exports.CharType = new exports.IOGType(UUID.create(), exports.ScalarName.Char, false, false, false, false, false, null, []);
    exports.ArrayType = null;
    exports.DictionaryType = null;
    exports.RootType = null;
    exports.types = [];
    exports.enums = {};
    return exports.typeToEnums = new exports.Dictionary();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.IOGBaseType = (function() {

      function IOGBaseType() {}

      return IOGBaseType;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.IOGObject = (function() {

      function IOGObject() {}

      IOGObject.prototype.equals = function(other) {
        return exports.UTILS.equals(this, other);
      };

      return IOGObject;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.IOGEnum = (function(_super) {

      __extends(IOGEnum, _super);

      function IOGEnum(type) {
        var firstValue, key, value, _ref;
        this.type = type;
        this.values = [];
        this.name = this.type.name;
        firstValue = true;
        _ref = type.enumValues;
        for (key in _ref) {
          value = _ref[key];
          this[key] = new exports.IOGEnumLiteral(key, value, this);
          this.values.push(this[key]);
          if (firstValue) {
            this.first = this[key];
          }
        }
      }

      IOGEnum.prototype.fromInt = function(intValue) {
        var value, _i, _len, _ref;
        _ref = this.values;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          value = _ref[_i];
          if (value.value === intValue) {
            return value;
          }
        }
        throw "Value is not in range of enumeration " + this.name + "!";
      };

      IOGEnum.prototype.equals = function(other) {
        return this.name === other.name;
      };

      return IOGEnum;

    })(exports.IOGBaseType);
  });

  namespace(execom.iog.name, function(exports) {
    exports.IOGEnumLiteral = (function(_super) {

      __extends(IOGEnumLiteral, _super);

      function IOGEnumLiteral(name, value, enumeration) {
        this.name = name;
        this.value = value;
        this.enumeration = enumeration;
      }

      IOGEnumLiteral.prototype.compareTo = function(other) {
        return exports.IOGNumber.NumberCompare(this.value, other.value);
      };

      IOGEnumLiteral.prototype.equals = function(other) {
        if (other.enumeration.name === this.enumeration.name && (this.name === other.name && this.value === other.value)) {
          return true;
        } else {
          return false;
        }
      };

      return IOGEnumLiteral;

    })(exports.IOGObject);
    return exports.IOGEnumLiteral.prototype.toJSON = function() {
      var json;
      json = {};
      json[exports.IOGJsonConstatns.IOG_TYPE] = this.enumeration.type;
      json[exports.IOGJsonConstatns.VALUE] = this.value;
      return json;
    };
  });

  namespace(execom.iog.name, function(exports) {
    return exports.IOGNumber = (function(_super) {

      __extends(IOGNumber, _super);

      function IOGNumber() {
        return IOGNumber.__super__.constructor.apply(this, arguments);
      }

      IOGNumber.NumberCompare = function(value1, value2) {
        var x, y;
        if (!(value1 instanceof exports.IOGNumber) && !(value2 instanceof exports.IOGNumber)) {
          throw "One of objects are not number!";
        }
        if (!exports.UTILS.equals(value1.iogType, value2.iogType)) {
          throw "One of objects are not number!";
        }
        x = new Number(value1.value);
        y = new Number(value2.value);
        if (isNaN(x) || isNaN(y)) {
          throw "One of objects are not number!";
        }
        if (x < y) {
          return -1;
        } else {
          if (x > y) {
            return 1;
          }
        }
        return 0;
      };

      IOGNumber.NumberEqual = function(value1, value2) {
        if (!(value1 instanceof exports.IOGNumber) && !(value2 instanceof exports.IOGNumber)) {
          throw false;
        }
        if (!exports.UTILS.equals(value1.iogType, value2.iogType)) {
          return false;
        }
        return exports.UTILS.equals(value1.value, value2.value);
      };

      return IOGNumber;

    })(exports.IOGBaseType);
  });

  namespace(execom.iog.name, function(exports) {
    return exports.Int32 = (function(_super) {

      __extends(Int32, _super);

      Int32.MAX_VALUE = 2147483647;

      Int32.MIN_VALUE = -2147483648;

      function Int32(value) {
        var x;
        x = Number(value);
        if (isNaN(x)) {
          throw "Entered value is not int32!";
        }
        if (value < exports.Int32.MIN_VALUE || value > exports.Int32.MAX_VALUE) {
          throw "Out of range!";
        }
        this.value = value;
        this.iogType = exports.IOGType.FindType(exports.ScalarName.Int32);
      }

      Int32.prototype.compareTo = function(other) {
        return exports.IOGNumber.NumberCompare(this, other);
      };

      Int32.prototype.equals = function(other) {
        return exports.IOGNumber.NumberEqual(this, other);
      };

      return Int32;

    })(exports.IOGNumber);
  });

  namespace(execom.iog.name, function(exports) {
    return exports.Int64 = (function(_super) {

      __extends(Int64, _super);

      Int64.MAX_VALUE = 9223372036854775807;

      Int64.MIN_VALUE = -9223372036854775808;

      function Int64(value) {
        var x;
        x = Number(value);
        if (isNaN(x)) {
          throw "Entered value is not int64!";
        }
        if (value < exports.Int64.MIN_VALUE || value > exports.Int64.MAX_VALUE) {
          throw "Out of range!";
        }
        this.value = value;
        this.iogType = exports.IOGType.FindType(exports.ScalarName.Int64);
      }

      Int64.prototype.compareTo = function(other) {
        return exports.IOGNumber.NumberCompare(this, other);
      };

      Int64.prototype.equals = function(other) {
        return exports.IOGNumber.NumberEqual(this, other);
      };

      return Int64;

    })(exports.IOGNumber);
  });

  namespace(execom.iog.name, function(exports) {
    return exports.Double = (function(_super) {

      __extends(Double, _super);

      Double.MAX_VALUE = 1.7976931348623157e+308;

      Double.MIN_VALUE = -1.7976931348623157e+308;

      function Double(value) {
        var x;
        x = Number(value);
        if (isNaN(x)) {
          throw "Entered value is not double!";
        }
        if (value < exports.Double.MIN_VALUE || value > exports.Double.MAX_VALUE) {
          throw "Out of range!";
        }
        this.value = value;
        this.iogType = exports.IOGType.FindType(exports.ScalarName.Double);
      }

      Double.prototype.compareTo = function(other) {
        return exports.IOGNumber.NumberCompare(this, other);
      };

      Double.prototype.equals = function(other) {
        return exports.IOGNumber.NumberEqual(this, other);
      };

      return Double;

    })(exports.IOGNumber);
  });

  namespace(execom.iog.name, function(exports) {
    return exports.Byte = (function(_super) {

      __extends(Byte, _super);

      Byte.MAX_VALUE = 255;

      Byte.MIN_VALUE = 0;

      function Byte(value) {
        var x;
        x = Number(value);
        if (isNaN(x)) {
          throw "Entered value is not byte!";
        }
        if (value < exports.Byte.MIN_VALUE || value > exports.Byte.MAX_VALUE) {
          throw "Out of range!";
        }
        this.value = value;
        this.iogType = exports.IOGType.FindType(exports.ScalarName.Byte);
      }

      Byte.prototype.compareTo = function(other) {
        return exports.IOGNumber.NumberCompare(this, other);
      };

      Byte.prototype.equals = function(other) {
        return exports.IOGNumber.NumberEqual(this, other);
      };

      return Byte;

    })(exports.IOGNumber);
  });

  namespace(execom.iog.name, function(exports) {
    return exports.Char = (function(_super) {

      __extends(Char, _super);

      function Char(value) {
        if (value.length > 1) {
          throw "Char cannot have more then one charachter!";
        }
        this.value = value;
        this.iogType = exports.IOGType.FindType(exports.ScalarName.Char);
      }

      Char.prototype.compareTo = function(other) {
        if (!other instanceof exports.Char) {
          throw "Type of compering type is not right!";
        }
        return this.value.compareTo(other.value);
      };

      Char.prototype.equals = function(other) {
        if (!other instanceof exports.Char) {
          return false;
        }
        return this.value === other.value;
      };

      return Char;

    })(exports.IOGBaseType);
  });

  namespace(execom.iog.name, function(exports) {
    return exports.Guid = (function(_super) {

      __extends(Guid, _super);

      function Guid(value) {
        this.value = UUID.tryParse(value);
        this.iogType = exports.IOGType.FindType(exports.ScalarName.Guid);
      }

      Guid.Create = function() {
        return new Guid(UUID.create());
      };

      Guid.EMPTY = new Guid(UUID.empty);

      Guid.TryParse = function(value) {
        return new exports.Guid(UUID.tryParse(value));
      };

      Guid.Parse = function() {
        return new Guid(UUID.Parse(value));
      };

      Guid.prototype.compareTo = function(other) {
        return this.value.compareTo(other.value);
      };

      Guid.prototype.equals = function(other) {
        if (!other instanceof exports.Guid) {
          return false;
        }
        return this.value === other.value;
      };

      return Guid;

    })(exports.IOGBaseType);
  });

  namespace(execom.iog.name, function(exports) {
    exports.IOGString = (function(_super) {

      __extends(IOGString, _super);

      function IOGString(value) {
        this.value = value;
        this.iogType = exports.IOGType.FindType(exports.ScalarName.String);
      }

      IOGString.prototype.compareTo = function(other) {
        if (!other instanceof exports.IOGString) {
          throw "Type of compering type is not right!";
        }
        return this.value.compareTo(other.value);
      };

      IOGString.prototype.equals = function(other) {
        if (!other instanceof exports.IOGString) {
          return false;
        }
        return this.value === other.value;
      };

      return IOGString;

    })(exports.IOGBaseType);
    return exports.IOGBoolean = (function(_super) {

      __extends(IOGBoolean, _super);

      function IOGBoolean(value) {
        this.value = Boolean(value);
        this.iogType = exports.IOGType.FindType(exports.ScalarName.Boolean);
      }

      IOGBoolean.prototype.compareTo = function(other) {
        if (!other instanceof exports.IOGBoolean) {
          throw "Type of compering type is not right!";
        }
        if (this.value) {
          if (other.value) {
            return 0;
          } else {
            return 1;
          }
        } else {
          if (other.value) {
            return -1;
          } else {
            return 0;
          }
        }
      };

      IOGBoolean.prototype.equals = function(other) {
        if (!other instanceof exports.Boolean) {
          return false;
        }
        return this.value === other.value;
      };

      return IOGBoolean;

    })(exports.IOGBaseType);
  });

  namespace(execom.iog.name, function(exports) {
    TimeSpan.ZERO = new TimeSpan();
    DateTime.MIN_DATE = new DateTime();
    DateTime.MIN_DATE.span = TimeSpan.ZERO;
    exports.IsolationLevel = {
      ReadOnly: 0,
      Snapshot: 1,
      Exclusive: 2
    };
    exports.EdgeType = {
      Contains: 0,
      OfType: 1,
      Property: 2,
      ListItem: 3,
      RootObject: 4,
      Special: 5
    };
    exports.EdgeFlags = {
      None: 0,
      Permanent: 1
    };
    exports.NodeType = {
      TypesRoot: 0,
      SnapshotsRoot: 1,
      Snapshot: 2,
      Type: 3,
      Scalar: 4,
      Object: 5,
      Collection: 6,
      Dictionary: 7,
      TypeMember: 8,
      TreeInternal: 9,
      TreeLeaf: 10
    };
    exports.NodeState = {
      None: 0,
      Created: 1,
      Modified: 2,
      Removed: 3
    };
    exports.NodeAccess = {
      Read: 0,
      ReadWrite: 1
    };
    exports.Constants = {
      TypesNodeId: new exports.Guid("22DD35BD-071B-4429-837D-4F5D2C201580"),
      SnapshotsNodeId: new exports.Guid("52138911-0016-4C08-A685-9487617FD664"),
      ExclusiveWriterLockId: new exports.Guid("7EB5139E-72C2-4029-9EFD-1CD514775832"),
      NullReferenceNodeId: new exports.Guid("FFCE2840-A5D7-4C1F-81F4-A8AC7FC61F92"),
      InstanceIdFieldName: "__instanceId__",
      PrimaryKeyIdFieldName: "__keyId__",
      TypeIdFieldName: "__typeId__",
      FacadeFieldName: "__facade__",
      ReadOnlyFieldName: "__readOnly__",
      ProxyTypeSufix: "ProxyTypeSufix",
      GeneratedAssemblyName: "IOG.RuntimeProxy",
      PropertyMemberIdSufix: "_MemberID_",
      PropertyIsScalarSufix: "_IsScalar_",
      TypeMemberPrimaryKeyId: new exports.Guid("67B21654-1E2D-4565-A4AE-33A7E1D43AF2")
    };
    exports.MemberTypes = {
      Constructor: 0,
      Event: 1,
      Field: 2,
      Method: 3,
      Property: 4,
      TypeInfo: 5,
      Custom: 6,
      NestedType: 7,
      All: 8
    };
    exports.TypeConstants = {
      ID: "ID",
      Name: "Name",
      IsCollectionType: "IsCollectionType",
      IsDictionaryType: "IsDictionaryType",
      IsInterface: "IsInterface",
      IsEnum: "IsEnum",
      IsGenericType: "IsGenericType",
      CustomAttributes: "CustomAttributes",
      Interfaces: "Interfaces",
      EnumValues: "EnumValues",
      GenericArguments: "GenericArguments",
      IsScalar: "IsScalar",
      GenericType: "GenericType",
      Properties: "Properties"
    };
    exports.ProperiteConstants = {
      CanRead: "CanRead",
      CanWrite: "CanWrite",
      Name: "Name",
      IsStatic: "IsStatic",
      CustomAttributes: "CustomAttributes",
      PropertyType: "PropertyType",
      DeclaringType: "DeclaringType"
    };
    exports.IOGTypeConstants = {
      Collection: "Collection",
      Dictionary: "Dictionary"
    };
    return exports.IOGJsonConstatns = {
      IOG_TYPE: "iogType",
      VALUE: "value"
    };
  });

  namespace(execom.iog.name, function(exports) {
    return exports.Edge = (function() {

      function Edge(toNodeId, data) {
        this.toNodeId = toNodeId;
        this.data = data;
      }

      return Edge;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.EdgeData = (function(_super) {

      __extends(EdgeData, _super);

      function EdgeData(semantic, data, flags) {
        this.semantic = semantic;
        this.data = data;
        this.flags = flags != null ? flags : exports.EdgeFlags.None;
      }

      EdgeData.prototype.compareTo = function(other) {
        if (!(other != null)) {
          console.log(other);
        }
        if ((other != null) && !(other.semantic != null)) {
          console.log(other.semantic);
        }
        if (exports.UTILS.equals(this, other)) {
          return 0;
        }
        if (this.semantic === exports.EdgeType.Special) {
          if (this === exports.EdgeDataSingleton.MIN_VALUE) {
            return -1;
          }
          if (other === exports.EdgeDataSingleton.MIN_VALUE) {
            return 1;
          }
          if (this === exports.EdgeDataSingleton.MAX_VALUE) {
            return 1;
          }
          if (other === exports.EdgeDataSingleton.MAX_VALUE) {
            return -1;
          }
        }
        if (this.semantic === other.semantic) {
          if (this.data.hasOwnProperty('data') && this.data.hasOwnProperty('data')) {
            return this.data.data.compareTo(other.data.data);
          } else {
            return this.data.compareTo(other.data);
          }
        } else {
          if (this.semantic < other.semantic) {
            return -1;
          } else {
            if (this.semantic > other.semantic) {
              return 1;
            } else {
              return 0;
            }
          }
        }
      };

      return EdgeData;

    })(exports.IOGObject);
  });

  namespace(execom.iog.name, function(exports) {
    return exports.EdgeDataSingleton = {
      MAX_VALUE: new exports.EdgeData(exports.EdgeType.Special, new exports.Guid("53F11357-62B7-430F-B446-9EC8F9702406"), exports.EdgeFlags.None),
      MIN_VALUE: new exports.EdgeData(exports.EdgeType.Special, new exports.Guid("76367091-B69D-4BDF-A643-779032AF3503"), exports.EdgeFlags.None)
    };
  });

  namespace(execom.iog.name, function(exports) {
    return exports.KeyValuePair = (function() {

      function KeyValuePair(key, value) {
        this.key = key;
        this.value = value;
      }

      return KeyValuePair;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.SortedList = (function() {

      function SortedList(array) {
        this.array = array != null ? array : [];
      }

      SortedList.prototype.Add = function(key, value) {
        var i, index, item, kv, _i, _len, _ref;
        index = -1;
        _ref = this.array;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          kv = _ref[i];
          if (exports.UTILS.equals(kv.key, key)) {
            throw 'Key already exists!';
          } else {
            if (kv.key.compareTo(key) >= 0) {
              index = i;
              break;
            }
          }
        }
        item = new exports.KeyValuePair(key, value);
        if (index !== -1) {
          this.array.splice(index, 0, item);
        } else {
          this.array.push(item);
        }
      };

      SortedList.prototype.Set = function(key, value) {
        var i, kv, _i, _len, _ref;
        _ref = this.array;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          kv = _ref[i];
          if (exports.UTILS.equals(kv.key, key)) {
            this.array[index].value = value;
          }
        }
      };

      SortedList.prototype.Remove = function(key) {
        var i, kv, tempArray, _i, _len, _ref;
        _ref = this.array;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          kv = _ref[i];
          if (exports.UTILS.equals(kv.key, key)) {
            if (i === 0) {
              this.array = this.array.slice(1, this.array.length);
              return true;
            } else {
              if (i === this.array.length - 1) {
                this.array = this.array.slice(0, this.array.length - 1);
                return true;
              } else {
                tempArray = this.array.slice(0, i);
                this.array = this.array.slice(i + 1, this.array.length);
                this.array = tempArray.concat(this.array);
                return true;
              }
            }
          }
        }
        return false;
      };

      SortedList.prototype.Contains = function(key) {
        var i, index, kv, _i, _len, _ref;
        index = -1;
        _ref = this.array;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          kv = _ref[i];
          if (exports.UTILS.equals(kv.key, key)) {
            return true;
          }
        }
        return false;
      };

      SortedList.prototype.IndexOf = function(key) {
        var i, index, kv, _i, _len, _ref;
        index = -1;
        _ref = this.array;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          kv = _ref[i];
          if (exports.UTILS.equals(kv.key, key)) {
            index = i;
            return index;
          }
        }
        return index;
      };

      SortedList.prototype.Get = function(key) {
        var i, kv, _i, _len, _ref;
        _ref = this.array;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          kv = _ref[i];
          if (exports.UTILS.equals(kv.key, key)) {
            return this.array[i].value;
          }
        }
        return null;
      };

      SortedList.prototype.Array = function() {
        var i, kv, rez, _i, _len, _ref;
        rez = [];
        _ref = this.array;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          kv = _ref[i];
          rez.push(kv.value);
        }
        return rez;
      };

      SortedList.prototype.Length = function() {
        return this.array.length;
      };

      SortedList.prototype.Clear = function() {
        this.array = [];
      };

      SortedList.prototype.Keys = function() {
        var i, kv, rez, _i, _len, _ref;
        rez = [];
        _ref = this.array;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          kv = _ref[i];
          rez.push(kv.key);
        }
        return rez;
      };

      return SortedList;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.Node = (function() {

      function Node(nodeType, data, edges, values) {
        this.nodeType = nodeType;
        this.data = data;
        this.edges = edges != null ? edges : new exports.SortedList();
        this.values = values != null ? values : new exports.Dictionary();
        this.previous = exports.Guid.EMPTY;
        this.commited = false;
      }

      Node.prototype.FindEdge = function(edgeData) {
        return this.edges.Get(edgeData);
      };

      Node.prototype.SetType = function(nodeType) {
        this.nodeType = nodeType;
      };

      Node.prototype.SetData = function(data) {
        this.data = data;
      };

      Node.prototype.AddEdge = function(edge) {
        this.edges.Add(edge.data, edge);
      };

      Node.prototype.SetEdgeToNode = function(data, toNodeId) {
        var edge;
        edge = this.edges.Get(data);
        if ((edge != null)) {
          edge.toNodeId = toNodeId;
        }
      };

      return Node;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.Subscription = (function() {

      function Subscription(subscriptionId, workspaceId) {
        this.subscriptionId = subscriptionId;
        this.workspaceId = workspaceId;
      }

      return Subscription;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.CachedReadNodeProvider = (function() {

      function CachedReadNodeProvider(parentProvider, cacheProvider) {
        this.parentProvider = parentProvider;
        this.cacheProvider = cacheProvider;
      }

      CachedReadNodeProvider.prototype.SetNode = function(identifier, node) {
        this.parentProvider.SetNode(identifier, node);
        this.cacheProvider.SetNode(identifier, node);
      };

      CachedReadNodeProvider.prototype.GetNode = function(identifier, access) {
        var node;
        node = this.cacheProvider.GetNode(identifier, access);
        if ((node != null)) {
          return node;
        } else {
          node = this.parentProvider.GetNode(identifier, access);
          this.cacheProvider.SetNode(identifier, node);
          return node;
        }
      };

      CachedReadNodeProvider.prototype.Contains = function(identifier) {
        if (this.cacheProvider.Contains(identifier)) {
          return true;
        } else {
          return this.parentProvider.Contains(identifier);
        }
      };

      CachedReadNodeProvider.prototype.Remove = function(identifier) {
        this.cacheProvider.Remove(identifier);
        this.parentProvider.Remove(identifier);
      };

      CachedReadNodeProvider.prototype.EnumerateNodes = function() {
        return this.parentProvider.EnumerateNodes();
      };

      CachedReadNodeProvider.prototype.Clear = function() {
        this.parentProvider.Clear();
        this.cacheProvider.Clear();
      };

      return CachedReadNodeProvider;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.DirectNodeProvider = (function() {

      function DirectNodeProvider(storage, forceUpdate) {
        this.storage = storage != null ? storage : new exports.MemoryStorage();
        this.forceUpdate = forceUpdate != null ? forceUpdate : false;
      }

      DirectNodeProvider.prototype.SetNode = function(identifier, node) {
        return this.storage.AddOrUpdate(identifier, node);
      };

      DirectNodeProvider.prototype.GetNode = function(nodeId, access) {
        return this.storage.Value(nodeId);
      };

      DirectNodeProvider.prototype.Contains = function(identifier) {
        return this.storage.Contains(identifier);
      };

      DirectNodeProvider.prototype.Remove = function(identifier) {
        this.storage.Remove(identifier);
      };

      DirectNodeProvider.prototype.EnumerateNodes = function() {
        return this.storage.ListKeys();
      };

      DirectNodeProvider.prototype.Clear = function() {
        this.storage.Clear();
      };

      DirectNodeProvider.prototype.Length = function() {
        return this.storage.Length();
      };

      return DirectNodeProvider;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.MemoryStorage = (function() {

      function MemoryStorage(dictionary) {
        this.dictionary = dictionary != null ? dictionary : new exports.Dictionary();
      }

      MemoryStorage.prototype.Remove = function(key) {
        return this.dictionary.Remove(key);
      };

      MemoryStorage.prototype.Contains = function(key) {
        return this.dictionary.Contains(key);
      };

      MemoryStorage.prototype.Value = function(key) {
        return this.dictionary.Get(key);
      };

      MemoryStorage.prototype.AddOrUpdate = function(key, value) {
        if (this.dictionary.Contains(key)) {
          this.dictionary.Set(key, value);
        } else {
          this.dictionary.Add(key, value);
        }
        return true;
      };

      MemoryStorage.prototype.ListKeys = function() {
        return this.dictionary.Keys();
      };

      MemoryStorage.prototype.Values = function() {
        return this.dictionary.array.map(function(element) {
          return element.value;
        });
      };

      MemoryStorage.prototype.Clear = function() {
        this.dictionary.Clear();
      };

      MemoryStorage.prototype.Length = function() {
        return this.dictionary.Length();
      };

      return MemoryStorage;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.PropertyInfo = (function() {

      function PropertyInfo(canRead, canWrite, declaringType, name, propertyType, isStatic, customAttributes) {
        this.canRead = canRead;
        this.canWrite = canWrite;
        this.declaringType = declaringType;
        this.name = name;
        this.propertyType = propertyType;
        this.isStatic = isStatic;
        this.customAttributes = customAttributes != null ? customAttributes : [];
      }

      PropertyInfo.prototype.GetCustomAttributes = function(name) {
        var attr, attributes, rezBoolean, _i, _len, _ref;
        attributes = [];
        rezBoolean = false;
        _ref = this.customAttributes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          attr = _ref[_i];
          if (attr.name === name) {
            rezBoolean = true;
            attributes.push(attr);
          }
        }
        return {
          result: rezBoolean,
          value: attributes
        };
      };

      PropertyInfo.prototype.GetPropertyType = function() {
        var type;
        type = exports.IOGType.FindType(this.propertyType.nameOfType);
        if (exports.UTILS.IsCollectionType(type)) {
          type = exports.IOGType.CreateCollectionWithGenericType(this.propertyType.genericArgumentsName[0]);
        }
        if (exports.UTILS.IsDictionaryType(type)) {
          type = exports.IOGType.CreateDictionaryWithGenericTypes(this.propertyType.genericArgumentsName[0], this.propertyType.genericArgumentsName[1]);
        }
        return type;
      };

      return PropertyInfo;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.Utils = (function() {

      Utils.IOG_TYPE = 'iogType';

      Utils.VALUE = 'value';

      function Utils() {}

      Utils.prototype.equals = function(first, second) {
        var hasOwnProperty, key, other, value;
        other = second;
        if (first instanceof exports.IOGEnum || second instanceof exports.IOGEnumLiteral) {
          return first.equals(other);
        }
        if (second instanceof exports.IOGEnum || second instanceof exports.IOGEnumLiteral) {
          return second.equals(first);
        }
        if (first === void 0 || second === void 0) {
          return false;
        }
        for (key in first) {
          if (!__hasProp.call(first, key)) continue;
          value = first[key];
          if ((other != null)) {
            hasOwnProperty = other.hasOwnProperty(key);
          } else {
            hasOwnProperty = false;
          }
          if (!(other != null) || !hasOwnProperty) {
            return false;
          }
          if (typeof other[key] === 'undefined') {
            return false;
          }
        }
        for (key in first) {
          if (!__hasProp.call(first, key)) continue;
          value = first[key];
          if (first[key]) {
            switch (typeof first[key]) {
              case 'object':
                if (!exports.UTILS.equals(first[key], other[key])) {
                  return false;
                }
                break;
              case 'function':
                if (typeof other[key] === 'undefined' || (key !== 'equals' && first[key].toString() !== other[key].toString())) {
                  return false;
                }
                break;
              default:
                if (first[key] !== other[key]) {
                  return false;
                }
            }
          } else {
            if (other[key]) {
              return false;
            }
          }
        }
        for (key in other) {
          if (!__hasProp.call(other, key)) continue;
          value = other[key];
          if (typeof first[key] === 'undefined') {
            return false;
          }
        }
        return true;
      };

      Utils.prototype.IsCollectionType = function(type) {
        if (type.isCollectionType === true) {
          return type;
        }
        return null;
      };

      Utils.prototype.IsDictionaryType = function(type) {
        if (type.isDictionaryType === true) {
          return type;
        }
        return null;
      };

      Utils.prototype.ExtractProperties = function(type, props) {
        var baseType, exist, interfaceType, p, pr, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
        _ref = type.properties;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          exist = false;
          for (_j = 0, _len1 = props.length; _j < _len1; _j++) {
            pr = props[_j];
            if (pr.name === p.name) {
              exist = true;
              break;
            }
          }
          if (!exist) {
            props.push(p);
          }
        }
        _ref1 = type.interfaces;
        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
          baseType = _ref1[_k];
          interfaceType = exports.IOGType.FindType(baseType.name);
          if ((interfaceType != null)) {
            exports.UTILS.ExtractProperties(interfaceType, props);
          }
        }
        return props;
      };

      Utils.prototype.GetType = function(typeName) {
        var type, _i, _len, _ref;
        if (typeName instanceof exports.IOGType) {
          return typeName;
        }
        _ref = exports.types;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          type = _ref[_i];
          if (type.name === typeName) {
            return type;
          }
        }
      };

      Utils.prototype.SetItemId = function(item, instanceId) {
        return item[exports.Constants.InstanceIdFieldName] = instanceId;
      };

      Utils.prototype.GetItemId = function(item) {
        return item["" + exports.Constants.InstanceIdFieldName];
      };

      Utils.prototype.HasItemId = function(item) {
        return item.hasOwnProperty(exports.Constants.InstanceIdFieldName);
      };

      Utils.prototype.GetItemPrimaryKeyId = function(value) {
        if ((value[exports.Constants.PrimaryKeyIdFieldName] != null)) {
          return value[exports.Constants.PrimaryKeyIdFieldName];
        } else {
          return exports.Guid.EMPTY;
        }
      };

      Utils.prototype.IsPermanentEdge = function(edge) {
        return edge.data.semantic === exports.EdgeType.OfType || edge.toNodeId === exports.Constants.NullReferenceNodeId || ((edge.data.flags === exports.EdgeFlags.permanent) === exports.EdgeFlags.permanent);
      };

      Utils.prototype.IsInstaceOfScalar = function(value, scalarType) {
        var valueType;
        if (value.hasOwnProperty(Utils.IOG_TYPE) && value.hasOwnProperty(Utils.VALUE)) {
          valueType = value[Utils.IOG_TYPE];
          if (exports.UTILS.equals(valueType, scalarType)) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      };

      Utils.prototype.IsNumber = function(n) {
        return $.isNumeric(n);
      };

      return Utils;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    exports.UTILS = new exports.Utils();
    return exports.equals = exports.UTILS.equals;
  });

  namespace(execom.iog.name, function(exports) {
    return exports.TypesService = (function() {

      TypesService.IOG_TYPE = "iogType";

      function TypesService(provider) {
        this.provider = provider != null ? provider : new exports.DirectNodeProvider();
        this.supportedScalarTypes = [];
        this.scalarTypesTable = new exports.Dictionary();
        this.typeToIdMapping = new exports.Dictionary();
        this.typeIdToTypeMapping = new exports.Dictionary();
        this.collectionTypesTable = new exports.Dictionary();
        this.dictionaryTypesTable = new exports.Dictionary();
      }

      TypesService.prototype.AddType = function(type) {
        var baseType, collectionType, dictionaryType, id, isPermanent, isPrimaryKey, memberId, node, p, properties, tempEdge, tempEdgeData, typeId, typesNode, value, valueId, valueNode, values, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1;
        this.ValidateType(type);
        typeId = this.GetTypeId(type);
        if (exports.UTILS.equals(typeId, exports.Guid.EMPTY)) {
          typeId = exports.Guid.Create();
          node = new exports.Node(exports.NodeType.Type, this.GetTypeName(type));
          typesNode = this.provider.GetNode(exports.Constants.TypesNodeId, exports.NodeAccess.ReadWrite);
          tempEdgeData = new exports.EdgeData(exports.EdgeType.Contains, typeId);
          tempEdge = new exports.Edge(typeId, tempEdgeData);
          typesNode.AddEdge(tempEdge);
          this.provider.SetNode(exports.Constants.TypesNodeId, typesNode);
          this.provider.SetNode(typeId, node);
          if (type.isInterface) {
            properties = [];
            exports.UTILS.ExtractProperties(type, properties);
            for (_i = 0, _len = properties.length; _i < _len; _i++) {
              p = properties[_i];
              isPermanent = p.GetCustomAttributes("ImmutableAttribute");
              isPrimaryKey = p.GetCustomAttributes("PrimaryKeyAttribute");
              this.AddType(p.GetPropertyType());
              memberId = this.AddTypeMember(p.name, p.GetPropertyType(), isPrimaryKey);
              node.AddEdge(new exports.Edge(memberId, new exports.EdgeData(exports.EdgeType.Property, memberId, isPermanent ? exports.EdgeFlags.Permanent : exports.EdgeFlags.None)));
            }
            collectionType = null;
            dictionaryType = null;
            if (((collectionType = exports.UTILS.IsCollectionType(type)) != null) && ((dictionaryType = exports.UTILS.IsDictionaryType(type)) != null)) {
              _ref = type.interfaces;
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                baseType = _ref[_j];
                id = this.AddType(baseType);
                node.AddEdge(new exports.Edge(id, new exports.EdgeData(exports.EdgeType.OfType, id)));
              }
              this.provider.SetNode(typeId, node);
            } else {
              _ref1 = type.genericArguments;
              for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                baseType = _ref1[_k];
                this.AddType(baseType);
              }
            }
            values = this.GetConstantValues(type);
            if (values.length > 0) {
              for (_l = 0, _len3 = values.length; _l < _len3; _l++) {
                value = values[_l];
                valueId = Guid.Create();
                valueNode = new exports.Node(exports.NodeType.Scalar, value.toString());
                this.provider.SetNode(valueId, valueNode);
                node.AddEdge(new exports.Edge(valueId, new exports.EdgeData(exports.EdgeType.Contains, value.toString())));
              }
            }
            this.provider.SetNode(typeId, node);
          }
        }
        return typeId;
      };

      TypesService.prototype.GetConstantValues = function(type) {
        var item, list, _i, _len, _ref;
        list = [];
        if (type.isEnum && type.customAttributes.indexOf("FlagsAttribute") === -1) {
          _ref = type.enumValues;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            list.push(item);
          }
        }
        if (type.name === "Boolean") {
          list.push(true);
          list.push(false);
        }
        return list;
      };

      TypesService.prototype.EnsureBasicScalarTypes = function() {
        var element, _i, _len, _ref, _results;
        _ref = this.supportedScalarTypes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          _results.push(this.AddType(element));
        }
        return _results;
      };

      TypesService.prototype.IsScalarType = function(typeId) {
        return this.scalarTypesTable.Contains(typeId);
      };

      TypesService.prototype.IsCollectionType = function(typeId) {
        return this.collectionTypesTable.Contains(typeId);
      };

      TypesService.prototype.IsDictionaryType = function(typeId) {
        return this.dictionaryTypesTable.Contains(typeId);
      };

      TypesService.prototype.GetTypeId = function(type) {
        var candidateNodeId, edge, name, node, _i, _len, _ref;
        name = this.GetTypeName(type);
        if (!(this.provider.GetNode(exports.Constants.TypesNodeId, exports.NodeAccess.Read) != null)) {
          return exports.Guid.EMPTY;
        }
        _ref = this.provider.GetNode(exports.Constants.TypesNodeId, exports.NodeAccess.Read).edges.Array();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          edge = _ref[_i];
          if (edge.data.semantic === exports.EdgeType.Contains) {
            candidateNodeId = edge.toNodeId;
            node = this.provider.GetNode(candidateNodeId, exports.NodeAccess.Read);
            if (exports.UTILS.equals(node.data.name, name)) {
              return candidateNodeId;
            }
          }
        }
        return exports.Guid.EMPTY;
      };

      TypesService.prototype.GetTypeIdCached = function(type) {
        var result;
        result = exports.Guid.EMPTY;
        if (((result = this.typeToIdMapping.Get(type)) != null)) {
          return result;
        } else {
          return exports.Guid.EMPTY;
        }
      };

      TypesService.prototype.GetTypeName = function(type) {
        if ((type != null) && (type.name != null)) {
          return type.name;
        } else {
          throw "Type is null";
        }
      };

      TypesService.prototype.AddTypeMember = function(name, type, isPrimaryKey) {
        var memberId, memberTypeId, node;
        memberId = exports.Guid.Create();
        node = new exports.Node(exports.NodeType.TypeMember, name);
        if (isPrimaryKey) {
          node.values.Add(exports.Constants.TypeMemberPrimaryKeyId, null);
        }
        memberTypeId = this.GetTypeId(type);
        if (exports.UTILS.equals(memberTypeId, exports.Guid.EMPTY)) {
          memberTypeId = this.AddType(type);
        }
        node.AddEdge(new exports.Edge(memberTypeId, new exports.EdgeData(exports.EdgeType.OfType, null)));
        this.provider.SetNode(memberId, node);
        return memberId;
      };

      TypesService.prototype.GetTypeMemberId = function(typeId, propertyName) {
        var candidateNode, edge, _i, _len, _ref;
        _ref = this.provider.GetNode(typeId, exports.NodeAccess.Read).edges.Array();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          edge = _ref[_i];
          if (edge.data.semantic === exports.EdgeType.Property) {
            candidateNode = this.provider.GetNode(edge.toNodeId, exports.NodeAccess.Read);
            if (exports.UTILS.equals(propertyName, candidateNode.data)) {
              return edge.toNodeId;
            }
          }
        }
        return exports.Guid.EMPTY;
      };

      TypesService.prototype.GetInstanceTypeId = function(instanceID) {
        return this.provider.GetNode(instanceId, exports.NodeAccess.Read).FindEdge(new exports.EdgeData(exports.EdgeType.OfType, null)).toNodeId;
      };

      /*
            Returns type identifier for given member
      */


      TypesService.prototype.GetMemberTypeId = function(memberId) {
        return this.provider.GetNode(memberId, exports.NodeAccess.Read).FindEdge(new exports.EdgeData(exports.EdgeType.OfType, null)).toNodeId;
      };

      TypesService.prototype.InitializeTypeSystem = function(types) {
        var collectionType, type, typeId, _i, _j, _len, _len1, _ref;
        this.typeToIdMapping = new exports.Dictionary();
        this.typeIdToTypeMapping = new exports.Dictionary();
        this.supportedScalarTypes = [exports.BooleanType, exports.StringType, exports.Int32Type, exports.Int64Type, exports.DoubleType, exports.DateTimeType, exports.GuidType, exports.TimeSpanType, exports.ByteType, exports.CharType];
        if (this.provider.Contains(exports.Constants.TypesNodeId)) {

        } else {
          this.provider.SetNode(exports.Constants.TypesNodeId, new exports.Node(exports.NodeType.TypesRoot, null));
          this.EnsureBasicScalarTypes();
          for (_i = 0, _len = types.length; _i < _len; _i++) {
            type = types[_i];
            this.AddType(type);
          }
        }
        _ref = this.GetTypes();
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          typeId = _ref[_j];
          type = this.GetTypeFromId(typeId);
          this.typeToIdMapping.Add(type, typeId);
          this.typeIdToTypeMapping.Add(typeId, type);
          collectionType = null;
          if ((collectionType = exports.UTILS.IsCollectionType(type)) != null) {
            this.collectionTypesTable.Add(typeId, type);
          }
          if ((collectionType = exports.UTILS.IsDictionaryType(type)) != null) {
            this.dictionaryTypesTable.Add(typeId, type);
          }
        }
        this.CacheScalarTypes();
        return this.typeToIdMapping;
      };

      TypesService.prototype.GetTypes = function() {
        var edge, list, node, _i, _len, _ref;
        list = [];
        node = this.provider.GetNode(exports.Constants.TypesNodeId, exports.NodeAccess.Read);
        _ref = node.edges.Array();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          edge = _ref[_i];
          if (edge.data.semantic === exports.EdgeType.Contains) {
            list.push(edge.toNodeId);
          }
        }
        return list;
      };

      TypesService.prototype.CacheScalarTypes = function() {
        var edge, type, typeId, _i, _len, _ref, _results;
        _ref = this.provider.GetNode(exports.Constants.TypesNodeId, exports.NodeAccess.Read).edges.Array();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          edge = _ref[_i];
          if (edge.data.semantic === exports.EdgeType.Contains) {
            typeId = edge.toNodeId;
            type = this.GetTypeFromId(typeId);
            if (this.IsSupportedScalarType(type)) {
              this.scalarTypesTable.Add(typeId, type);
            }
            if (type.isEnum) {
              _results.push(this.scalarTypesTable.Add(typeId, type));
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      TypesService.prototype.IsSupportedScalarType = function(type) {
        var element, _i, _len, _ref;
        _ref = this.supportedScalarTypes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          if (exports.UTILS.equals(element, type)) {
            return true;
          }
        }
        return false;
      };

      TypesService.prototype.ValidateType = function(type) {};

      TypesService.prototype.CheckPrimaryKeyField = function(type) {
        var count, prop, properties, _i, _len;
        count = 0;
        properties = [];
        exports.UTILS.ExtractProperties(type, properties);
        for (_i = 0, _len = properties.length; _i < _len; _i++) {
          prop = properties[_i];
          if (prop.GetCustomAttributes("PrimaryKeyAttribute")) {
            return true;
          }
        }
        return false;
      };

      TypesService.prototype.GetTypeEdges = function(typeId) {
        return this.provider.GetNode(typeId, exports.NodeAccess.Read).edges.Array();
      };

      TypesService.prototype.GetDefaultPropertyValue = function(typeId) {
        var t, val;
        if (!this.IsScalarType(typeId)) {
          throw "Scalar type expected";
        }
        t = this.typeIdToTypeMapping.Get(typeId);
        val = null;
        if (exports.UTILS.equals(t, exports.BooleanType)) {
          val = new exports.IOGBoolean(false);
        } else {
          if (exports.UTILS.equals(t, exports.DateTimeType)) {
            val = DateTime.MIN_DATE;
            val[TypesService.IOG_TYPE] = exports.DateTimeType;
          } else {
            if (exports.UTILS.equals(t, exports.TimeSpanType)) {
              val = TimeSpan.ZERO;
              val[TypesService.IOG_TYPE] = exports.TimeSpanType;
            } else {
              if (exports.UTILS.equals(t, exports.Int32Type)) {
                val = new exports.Int32(0);
              } else {
                if (exports.UTILS.equals(t, exports.Int64Type)) {
                  val = new exports.Int64(0);
                } else {
                  if (exports.UTILS.equals(t, exports.DoubleType)) {
                    val = new exports.Double(0);
                  } else {
                    if (exports.UTILS.equals(t, exports.ByteType)) {
                      val = new exports.Byte(0);
                    } else {
                      if (exports.UTILS.equals(t, exports.StringType)) {
                        val = new exports.IOGString("");
                      } else {
                        if (exports.UTILS.equals(t, exports.GuidType)) {
                          val = exports.Guid.EMPTY;
                        } else {
                          if (exports.UTILS.equals(t, exports.CharType)) {
                            val = new exports.Char('a');
                          } else {
                            if (t.isEnum) {
                              val = t.enumValues[0];
                            } else {
                              throw "Default undefined for type " + t.name;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return val;
      };

      TypesService.prototype.GetTypeFromId = function(typeId) {
        var node;
        node = this.provider.GetNode(typeId, exports.NodeAccess.Read);
        return exports.UTILS.GetType(node.data);
      };

      TypesService.prototype.GetTypeFromIdCached = function(typeId) {
        return this.typeIdToTypeMapping.Get(typeId);
      };

      TypesService.prototype.IsSealedType = function(typeId) {
        var candidate, edge, _i, _j, _len, _len1, _ref, _ref1;
        if (typeId.name === "Type") {
          typeId = this.GetTypeId(type);
        }
        if (this.IsScalarType(typeId)) {
          return true;
        }
        _ref = this.GetTypes();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          candidate = _ref[_i];
          if (candidate !== typeId) {
            _ref1 = this.GetTypeEdges(candidate);
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              edge = _ref1[_j];
              if (edge.data.semantic === exports.EdgeType.OfType) {
                if (edge.toNodeId === typeId) {
                  return false;
                }
              }
            }
          }
        }
        return true;
      };

      TypesService.prototype.GetTypePrimaryKeyMemberId = function(typeId) {
        var edge, memberNode, _i, _len, _ref;
        _ref = this.GetTypeEdges(typeId);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          edge = _ref[_i];
          if (edge.data.semantic === exports.EdgeType.Property) {
            memberNode = this.provider.GetNode(edge.toNodeId, exports.NodeAccess.Read);
            if (memberNode.values.Contains(exports.Constants.TypeMemberPrimaryKeyId)) {
              return edge.toNodeId;
            }
          }
        }
        return exports.Guid.EMPTY;
      };

      TypesService.prototype.GetMemberName = function(typeId, memberId) {
        return this.provider.GetNode(memberId, exports.NodeAccess.Read).data;
      };

      TypesService.prototype.GetRegisteredTypes = function() {
        return typeIdToTypeMapping.keys;
      };

      return TypesService;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.ObjectInstancesService = (function() {

      function ObjectInstancesService(provider, typesService) {
        this.provider = provider;
        this.typesService = typesService;
      }

      ObjectInstancesService.prototype.NewInstance = function(typeId) {
        var id, node;
        id = exports.Guid.Create();
        node = new exports.Node(exports.NodeType.Object, null);
        node.commited = false;
        node.AddEdge(new exports.Edge(typeId, new exports.EdgeData(exports.EdgeType.OfType, null)));
        this.InitializeInstance(node, typeId);
        this.provider.SetNode(id, node);
        return id;
      };

      ObjectInstancesService.prototype.GetScalarInstanceMember = function(instanceId, memberId) {
        return this.provider.GetNode(instanceId, exports.NodeAccess.Read).values.Get(memberId);
      };

      ObjectInstancesService.prototype.GetScalarInstanceValue = function(valueInstanceId) {
        return this.provider.GetNode(valueInstanceId, NodeAccess.Read).data;
      };

      ObjectInstancesService.prototype.GetReferenceInstanceMember = function(instanceId, memberId) {
        var edge, isPermanent, node, rezObject;
        node = this.provider.GetNode(instanceId, exports.NodeAccess.Read);
        edge = node.FindEdge(new exports.EdgeData(exports.EdgeType.Property, memberId));
        isPermanent = (edge.data.flags === exports.EdgeFlags.Permanent) && node.commited;
        rezObject = {
          "guid": edge.toNodeId,
          "isPermanet": isPermanent
        };
        return rezObject;
      };

      ObjectInstancesService.prototype.SetScalarInstanceMember = function(instanceId, memberId, value) {
        var node;
        node = this.provider.GetNode(instanceId, exports.NodeAccess.ReadWrite);
        if (node.values.Contains(memberId)) {
          node.values.Set(memberId, value);
        } else {
          node.values.Add(memberId, value);
        }
        this.provider.SetNode(instanceId, node);
      };

      ObjectInstancesService.prototype.SetReferenceInstanceMember = function(instanceId, memberId, referenceId) {
        var node;
        node = this.provider.GetNode(instanceId, exports.NodeAccess.ReadWrite);
        node.SetEdgeToNode(new exports.EdgeData(exports.EdgeType.Property, memberId), referenceId);
        this.provider.SetNode(instanceId, node);
      };

      ObjectInstancesService.prototype.InitializeInstance = function(instance, typeId) {
        var edge, isPermanentEdge, memberId, memberTypeId, value, _i, _len, _ref;
        _ref = this.typesService.GetTypeEdges(typeId);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          edge = _ref[_i];
          if (edge.data.semantic === exports.EdgeType.Property) {
            memberId = edge.toNodeId;
            memberTypeId = this.typesService.GetMemberTypeId(memberId);
            if (this.typesService.IsScalarType(memberTypeId)) {
              value = this.typesService.GetDefaultPropertyValue(memberTypeId);
              instance.values.Add(memberId, value);
            } else {
              isPermanentEdge = edge.data.flags === exports.EdgeFlags.Permanent;
              instance.AddEdge(new exports.Edge(exports.Constants.NullReferenceNodeId, new exports.EdgeData(exports.EdgeType.Property, memberId, isPermanentEdge ? exports.EdgeFlags.Permanent : exports.EdgeFlags.None)));
            }
          }
        }
      };

      ObjectInstancesService.prototype.GetInstanceTypeId = function(instanceId) {
        return this.provider.GetNode(instanceId, exports.NodeAccess.Read).FindEdge(new exports.EdgeData(exports.EdgeType.OfType, null)).toNodeId;
      };

      ObjectInstancesService.prototype.SetImmutable = function(instanceId, memberId) {
        var edge, newEdge, node;
        node = this.provider.GetNode(instanceId, exports.NodeAccess.ReadWrite);
        edge = node.FindEdge(new exports.EdgeData(exports.EdgeType.Property, memberId));
        node.Edges.Remove(edge.data);
        newEdge = new exports.Edge(edge.toNodeId, new exports.EdgeData(edge.data.semantic, edge.data.Data, exports.EdgeFlags.Permanent));
        node.AddEdge(newEdge);
        this.provider.SetNode(instanceId, node);
      };

      return ObjectInstancesService;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    exports.Enumerator = (function() {
      var array, currentNumber;

      array = [];

      currentNumber = -1;

      function Enumerator(array) {
        if (array == null) {
          array = [];
        }
        this.array = array;
        this.currentNumber = -1;
      }

      Enumerator.prototype.MoveNext = function() {
        if (this.array.length > this.currentNumber + 1) {
          this.currentNumber = this.currentNumber + 1;
          return true;
        }
        return false;
      };

      Enumerator.prototype.Reset = function() {
        this.currentNumber = -1;
      };

      Enumerator.prototype.Current = function() {
        if (this.currentNumber >= 0 && this.currentNumber < this.array.length) {
          return this.array[this.currentNumber];
        }
        return null;
      };

      return Enumerator;

    })();
    return Array.prototype.GetEnumerator = function() {
      return new exports.Enumerator(this);
    };
  });

  namespace(execom.iog.name, function(exports) {
    return exports.BPlusTreeEnumerator = (function() {

      function BPlusTreeEnumerator(nodes, rootNodeId, edgeType, currentLeaf) {
        this.nodes = nodes;
        this.rootNodeId = rootNodeId;
        this.edgeType = edgeType;
        this.currentLeaf = currentLeaf;
        this.currentLeaf = exports.BPlusTreeOperations.LeftLeaf(nodes, nodes.GetNode(rootNodeId, exports.NodeAccess.Read));
        this.currentLeafEnumerator = this.currentLeaf.edges.Array().GetEnumerator();
      }

      BPlusTreeEnumerator.prototype.Current = function() {
        return this.currentLeafEnumerator.Current();
      };

      BPlusTreeEnumerator.prototype.CurrentItem = function() {
        return this.currentLeafEnumerator.Current();
      };

      BPlusTreeEnumerator.prototype.MoveNext = function() {
        var res;
        res = false;
        res = this.MoveNextInternal();
        while (res && this.Current().data.semantic !== this.edgeType) {
          res = this.MoveNextInternal();
        }
        return res;
      };

      BPlusTreeEnumerator.prototype.MoveNextInternal = function() {
        var current, currentLeaf, res, sampleData;
        if (!(this.currentLeafEnumerator != null)) {
          return false;
        }
        current = this.Current();
        sampleData = null;
        if (current != null) {
          sampleData = current.data;
        }
        res = this.currentLeafEnumerator.MoveNext();
        if (res) {
          return true;
        } else {
          this.currentLeafEnumerator = null;
          currentLeaf = exports.BPlusTreeOperations.NextLeaf(this.nodes, this.rootNodeId, sampleData);
          if (currentLeaf === null) {
            return false;
          } else {
            this.currentLeafEnumerator = currentLeaf.edges.values.GetEnumerator();
            return this.currentLeafEnumerator.MoveNext();
          }
        }
      };

      BPlusTreeEnumerator.prototype.Reset = function() {
        var currentLeaf;
        if (this.currentLeafEnumerator != null) {
          this.currentLeafEnumerator.Reset();
        }
        currentLeaf = exports.BPlusTreeOperations.LeftLeaf(this.nodes, this.nodes.GetNode(this.rootNodeId, exports.NodeAccess.Read));
        this.currentLeafEnumerator = currentLeaf.edges.Array().GetEnumerator();
      };

      return BPlusTreeEnumerator;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    var BPlusTreeOperationsClass;
    exports.SplitResult = (function() {

      function SplitResult(createdNodeId, createdNode, rightKey) {
        this.createdNodeId = createdNodeId;
        this.createdNode = createdNode;
        this.rightKey = rightKey;
      }

      return SplitResult;

    })();
    exports.FindResult = (function() {

      function FindResult(nodeId, node) {
        this.nodeId = nodeId;
        this.node = node;
      }

      return FindResult;

    })();
    exports.RemovalResult = (function() {

      function RemovalResult(remainingCount, wasRemoved, wasMerged) {
        this.remainingCount = remainingCount;
        this.wasRemoved = wasRemoved;
        this.wasMerged = wasMerged;
      }

      return RemovalResult;

    })();
    BPlusTreeOperationsClass = (function() {

      function BPlusTreeOperationsClass() {
        this.InitFields();
      }

      BPlusTreeOperationsClass.prototype.InitFields = function() {
        this.InternalNodeData = new exports.Guid("46F41F60-F781-445A-A416-B35E0CA940B4");
        return this.LeafNodeData = new exports.Guid("6DEFCDC7-4C59-4120-87C6-C72363751BE7");
      };

      BPlusTreeOperationsClass.prototype.CreateRootNode = function(nodeType, rootNodeId) {
        var node;
        node = new exports.Node(nodeType, this.LeafNodeData);
        return node;
      };

      BPlusTreeOperationsClass.prototype.InsertEdge = function(nodes, rootNodeId, edge, treeOrder) {
        var node, result;
        if (treeOrder < 6) {
          throw "treeOrder is smaller then 6";
        }
        result = this.FindLeafNode(nodes, rootNodeId, edge.data);
        if (result.node.edges.Length() === treeOrder) {
          this.SplitTree(nodes, rootNodeId, true, edge.data, treeOrder);
          result = this.FindLeafNode(nodes, rootNodeId, edge.data);
        }
        if (!exports.UTILS.equals(result.node.data, this.LeafNodeData)) {
          throw "Leaf node expected";
        }
        node = nodes.GetNode(result.nodeId, exports.NodeAccess.ReadWrite);
        node.AddEdge(edge);
        return nodes.SetNode(result.nodeId, node);
      };

      BPlusTreeOperationsClass.prototype.TryFindEdge = function(nodes, rootNodeId, data) {
        var result, value;
        result = this.FindLeafNode(nodes, rootNodeId, data);
        if (result === null || result.node === null) {
          return {
            "result": false,
            "value": null
          };
        } else {
          if (!exports.UTILS.equals(result.node.data, this.LeafNodeData)) {
            return {
              "result": false,
              "value": null
            };
          }
          value = result.node.edges.Get(data);
          return {
            "result": value != null,
            "value": value
          };
        }
      };

      BPlusTreeOperationsClass.prototype.TrySetEdgeToNode = function(nodes, rootNodeId, data, toNodeId) {
        var result;
        result = this.FindLeafNode(nodes, rootNodeId, data);
        if (result === null) {
          throw "Key not found";
        } else {
          if (result.node.data !== this.LeafNodeData) {
            throw "Leaf node expected";
          }
          result.node.SetEdgeToNode(data, toNodeId);
          nodes.SetNode(result.nodeId, result.node);
          return true;
        }
      };

      BPlusTreeOperationsClass.prototype.RemoveEdge = function(nodes, rootNodeId, data, treeOrder) {
        var result;
        result = this.RemoveEdgeRecursive(nodes, rootNodeId, data, treeOrder);
        return result.wasRemoved;
      };

      BPlusTreeOperationsClass.prototype.Count = function(nodes, rootNodeId, data) {
        var edge, node, sum, _i, _j, _len, _len1, _ref, _ref1;
        node = nodes.GetNode(rootNodeId, exports.NodeAccess.Read);
        if (exports.UTILS.equals(node.data, this.LeafNodeData)) {
          sum = 0;
          _ref = node.edges.Array();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            edge = _ref[_i];
            if (edge.data.semantic === data) {
              sum = sum + 1;
            }
          }
          return sum;
        } else {
          sum = 0;
          _ref1 = node.edges.Array();
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            edge = _ref1[_j];
            sum = sum + this.Count(nodes, edge.toNodeId, data);
          }
          return sum;
        }
      };

      BPlusTreeOperationsClass.prototype.GetEnumerator = function(nodes, rootNodeId, edgeType) {
        return new exports.BPlusTreeEnumerator(nodes, rootNodeId, edgeType);
      };

      BPlusTreeOperationsClass.prototype.Clone = function(nodes, sourceId, destinationId) {
        var edge, newNode, node, subId, _i, _len, _ref;
        node = nodes.GetNode(sourceId, exports.NodeAccess.Read);
        if (exports.UTILS.equals(node.data, this.InternalNodeData)) {
          newNode = new exports.Node(node.nodeType, node.data);
          _ref = node.edges.values;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            edge = _ref[_i];
            subId = exports.Guid.Create();
            this.Clone(nodes, edge.toNodeId, subId);
            newNode.AddEdge(new exports.Edge(subId, edge.data));
          }
          return nodes.SetNode(destinationId, newNode);
        } else {
          if (exports.UTILS.equals(node.data, this.LeafNodeData)) {
            newNode = new exports.Node(node.nodeType, node.data, node.edges);
            return nodes.SetNode(destinationId, newNode);
          } else {
            throw "Invalid operation";
          }
        }
      };

      BPlusTreeOperationsClass.prototype.FindLeafNode = function(nodes, rootNodeId, data) {
        var id, leadingEdge, node;
        node = nodes.GetNode(rootNodeId, exports.NodeAccess.Read);
        id = rootNodeId;
        if (!(node != null)) {
          return new FindResult(null, null);
        }
        while (exports.UTILS.equals(node.data, this.InternalNodeData)) {
          leadingEdge = this.FindLeadingEdge(data, node);
          node = nodes.GetNode(leadingEdge.toNodeId, exports.NodeAccess.Read);
          id = leadingEdge.toNodeId;
        }
        return new exports.FindResult(id, node);
      };

      BPlusTreeOperationsClass.prototype.FindLeadingEdge = function(data, node) {
        return node.edges.Get(node.edges.Keys()[this.FindLeadingEdgeIndex(data, node)]);
      };

      BPlusTreeOperationsClass.prototype.FindLeadingEdgeIndex = function(data, node) {
        var i, keys, step;
        if (exports.UTILS.equals(node.data, this.InternalNodeData)) {
          keys = node.edges.Keys();
          i = 0;
          step = keys.length;
          while (true) {
            if (step > 1) {
              step = Math.floor(step / 2);
            }
            if (data.compareTo(keys[i]) < 0) {
              if (i === 0) {
                return i;
              }
              if (data.compareTo(keys[i - 1]) >= 0) {
                return i;
              } else {
                i = i - step;
              }
            } else {
              if (i === keys.length - 1) {
                return i;
              } else {
                i = i + step;
              }
            }
          }
        } else {
          throw "Internal node expected";
        }
      };

      BPlusTreeOperationsClass.prototype.SplitTree = function(nodes, nodeId, isRoot, data, treeOrder) {
        var currentNode, eleme, i, j, key, keys, leadingEdge, leftNode, leftNodeId, newInternal, newInternalId, newLeaf, newLeafId, nrToRemove, result, rightNode, rightNodeId, _i, _j, _k, _l, _len, _len1, _m, _ref;
        currentNode = nodes.GetNode(nodeId, exports.NodeAccess.ReadWrite);
        if (isRoot) {
          if (exports.UTILS.equals(currentNode.data, this.InternalNodeData)) {
            leadingEdge = this.FindLeadingEdge(data, currentNode);
            result = this.SplitTree(nodes, leadingEdge.toNodeId, false, data, treeOrder);
            if (result !== null) {
              currentNode.AddEdge(new exports.Edge(result.createdNodeId, result.rightKey));
              if (currentNode.edges.Length() === (treeOrder + 1)) {
                leftNodeId = exports.Guid.Create();
                rightNodeId = exports.Guid.Create();
                leftNode = new exports.Node(exports.NodeType.TreeInternal, this.InternalNodeData);
                rightNode = new exports.Node(exports.NodeType.TreeInternal, this.InternalNodeData);
                keys = currentNode.edges.Keys();
                for (i = _i = 0, _len = keys.length; _i < _len; i = ++_i) {
                  eleme = keys[i];
                  if (i < Math.floor(keys.length / 2)) {
                    leftNode.AddEdge(currentNode.edges.Get(keys[i]));
                  } else {
                    rightNode.AddEdge(currentNode.edges.Get(keys[i]));
                  }
                }
                this.SetLastInternalKey(leftNode);
                this.SetLastInternalKey(rightNode);
                currentNode.edges.Clear();
                currentNode.AddEdge(new exports.Edge(leftNodeId, this.LeftEdge(nodes, rightNode).data));
                currentNode.AddEdge(new exports.Edge(rightNodeId, exports.EdgeDataSingleton.MAX_VALUE));
                nodes.SetNode(leftNodeId, leftNode);
                nodes.SetNode(rightNodeId, rightNode);
              }
              nodes.SetNode(nodeId, currentNode);
            } else {
              return null;
            }
          } else {
            if (currentNode.edges.Length() === treeOrder) {
              leftNodeId = exports.Guid.Create();
              rightNodeId = exports.Guid.Create();
              leftNode = new exports.Node(exports.NodeType.TreeLeaf, this.LeafNodeData);
              rightNode = new exports.Node(exports.NodeType.TreeLeaf, this.LeafNodeData);
              keys = currentNode.edges.Keys();
              for (i = _j = 0, _len1 = keys.length; _j < _len1; i = ++_j) {
                key = keys[i];
                if (i < Math.floor(keys.length / 2)) {
                  leftNode.AddEdge(currentNode.edges.Get(keys[i]));
                } else {
                  rightNode.AddEdge(currentNode.edges.Get(keys[i]));
                }
              }
              currentNode.edges.Clear();
              currentNode.AddEdge(new exports.Edge(leftNodeId, this.LeftEdge(nodes, rightNode).data));
              currentNode.AddEdge(new exports.Edge(rightNodeId, exports.EdgeDataSingleton.MAX_VALUE));
              currentNode.SetData(this.InternalNodeData);
              nodes.SetNode(leftNodeId, leftNode);
              nodes.SetNode(rightNodeId, rightNode);
              nodes.SetNode(nodeId, currentNode);
            }
          }
          return null;
        } else {
          if (exports.UTILS.equals(currentNode.data, this.InternalNodeData)) {
            leadingEdge = this.FindLeadingEdge(data, currentNode);
            result = this.SplitTree(nodes, leadingEdge.toNodeId, false, data, treeOrder);
            if (result !== null) {
              currentNode.AddEdge(new exports.Edge(result.createdNodeId, result.rightKey));
              if (currentNode.edges.Length() === treeOrder) {
                newInternalId = exports.Guid.Create();
                newInternal = new exports.Node(exports.NodeType.TreeInternal, this.InternalNodeData);
                keys = currentNode.edges.Keys();
                for (i in keys) {
                  key = keys[i];
                  if (i >= Math.floor(keys.length / 2)) {
                    break;
                  }
                  newInternal.AddEdge(currentNode.edges.Get(key));
                }
                nrToRemove = Math.floor(keys.length / 2);
                for (j = _k = 0; 0 <= nrToRemove ? _k <= nrToRemove : _k >= nrToRemove; j = 0 <= nrToRemove ? ++_k : --_k) {
                  currentNode.edges.Remove(keys[j]);
                }
                this.SetLastInternalKey(newInternal);
                nodes.SetNode(newInternalId, newInternal);
                nodes.SetNode(nodeId, currentNode);
                return new exports.SplitResult(newInternalId, newInternal, this.LeftEdge(nodes, currentNode).data);
              } else {
                nodes.SetNode(nodeId, currentNode);
                return null;
              }
            } else {
              return null;
            }
          } else {
            if (exports.UTILS.equals(currentNode.data, this.LeafNodeData)) {
              newLeafId = exports.Guid.Create();
              newLeaf = new exports.Node(exports.NodeType.TreeLeaf, this.LeafNodeData);
              keys = currentNode.edges.Keys();
              for (i = _l = 0, _ref = Math.floor(keys.length / 2); 0 <= _ref ? _l <= _ref : _l >= _ref; i = 0 <= _ref ? ++_l : --_l) {
                newLeaf.AddEdge(currentNode.edges.Get(keys[i]));
              }
              nrToRemove = keys.length / 2;
              for (i = _m = 0; 0 <= nrToRemove ? _m <= nrToRemove : _m >= nrToRemove; i = 0 <= nrToRemove ? ++_m : --_m) {
                currentNode.edges.Remove(keys[i]);
              }
              nodes.SetNode(newLeafId, newLeaf);
              nodes.SetNode(nodeId, currentNode);
              return new exports.SplitResult(newLeafId, newLeaf, this.LeftEdge(nodes, currentNode).data);
            } else {
              throw "Unexpected node data";
            }
          }
        }
      };

      BPlusTreeOperationsClass.prototype.LeftLeaf = function(nodes, node) {
        if (exports.UTILS.equals(node.data, this.LeafNodeData)) {
          return node;
        } else {
          return this.LeftLeaf(nodes, nodes.GetNode(node.edges.Get(node.edges.Keys()[0]).toNodeId, exports.NodeAccess.Read));
        }
      };

      BPlusTreeOperationsClass.prototype.NextLeaf = function(nodes, rootNodeId, sampleData) {
        var id, leadingEdgeIndex, nextInternalParentId, node;
        node = nodes.GetNode(rootNodeId, exports.NodeAccess.Read);
        id = rootNodeId;
        nextInternalParentId = exports.Guid.EMPTY;
        while (exports.UTILS.equals(node.data, this.InternalNodeData)) {
          leadingEdgeIndex = this.FindLeadingEdgeIndex(sampleData, node);
          if (leadingEdgeIndex < node.edges.Length() - 1) {
            nextInternalParentId = node.edges[node.edges.Keys()[leadingEdgeIndex + 1]].toNodeId;
          }
          node = nodes.GetNode(node.edges.Get(node.edges.Keys()[leadingEdgeIndex]).toNodeId, exports.NodeAccess.Read);
        }
        if (exports.UTILS.equals(nextInternalParentId, exports.Guid.EMPTY)) {
          return null;
        } else {
          return this.LeftLeaf(nodes, nodes.GetNode(nextInternalParentId, exports.NodeAccess.Read));
        }
      };

      BPlusTreeOperationsClass.prototype.LeftEdge = function(nodes, node) {
        if (exports.UTILS.equals(node.data, this.LeafNodeData)) {
          return node.edges.Get(node.edges.Keys()[0]);
        } else {
          return this.LeftEdge(nodes, nodes.GetNode(node.edges.Get(node.edges.Keys()[0]).toNodeId, exports.NodeAccess.Read));
        }
      };

      BPlusTreeOperationsClass.prototype.RightEdge = function(nodes, node) {
        if (exports.UTILS.equals(node.data, this.LeafNodeData)) {
          if (node.edges.Length() > 0) {
            return node.edges.Get(node.edges.Keys()[node.edges.Length() - 1]);
          } else {
            return null;
          }
        }
      };

      BPlusTreeOperationsClass.prototype.SetLastInternalKey = function(node) {
        var edge, lastKey;
        lastKey = node.edges.Keys()[node.edges.Length() - 1];
        edge = node.edges.Get(lastKey);
        if (!exports.UTILS.equals(edge.data, exports.EdgeDataSingleton.MAX_VALUE)) {
          node.edges.Remove(lastKey);
          return node.AddEdge(new exports.Edge(edge.toNodeId, exports.EdgeDataSingleton.MAX_VALUE));
        }
      };

      BPlusTreeOperationsClass.prototype.RemoveEdgeRecursive = function(nodes, nodeId, data, treeOrder) {
        var edge, edgeIndex, node, removeResult, res;
        node = nodes.GetNode(nodeId, exports.NodeAccess.ReadWrite);
        if (exports.UTILS.equals(node.data, this.LeafNodeData)) {
          removeResult = node.edges.Remove(data);
          res = new exports.RemovalResult(node.edges.Length(), removeResult, false);
          return res;
        } else {
          edgeIndex = this.FindLeadingEdgeIndex(data, node);
          edge = node.edges.Get(node.edges.Keys()[edgeIndex]);
          res = this.RemoveEdgeRecursive(nodes, edge.toNodeId, data, treeOrder);
          if (!res.wasRemoved) {
            return res;
          }
          if (res.remainingCount < Math.floor(treeOrder / 2)) {
            if (edgeIndex < node.edges.Length() - 1) {
              res = this.MergeNodes(nodes, node, edgeIndex, edgeIndex + 1, treeOrder);
              return res;
            } else {
              res = this.MergeNodes(nodes, node, edgeIndex - 1, edgeIndex, treeOrder);
              return res;
            }
          } else {
            return res;
          }
        }
      };

      BPlusTreeOperationsClass.prototype.MergeNodes = function(nodes, node, leftIndex, rightIndex, treeOrder) {
        var childEdge, i, leftKey, leftNode, leftNodeId, maxEdge, maxEdgeKey, numberToTake, removalKey, rightKey, rightNode, rightNodeId, _i, _j, _k, _l, _len, _ref, _ref1, _ref2;
        leftKey = node.edges.Keys()[leftIndex];
        leftNodeId = node.edges.Get(leftKey).toNodeId;
        leftNode = nodes.GetNode(leftNodeId, exports.NodeAccess.ReadWrite);
        rightKey = node.edges.Keys()[rightIndex];
        rightNodeId = node.edges.Get(rightKey).toNodeId;
        rightNode = nodes.GetNode(rightNodeId, exports.NodeAccess.ReadWrite);
        if (!exports.UTILS.equals(leftNode.data, rightNode.data)) {
          throw "Both nodes must be of same type";
        }
        if (exports.UTILS.equals(leftNode.data, this.InternalNodeData)) {
          maxEdgeKey = leftNode.edges.Keys()[leftNode.edges.Length() - 1];
          maxEdge = leftNode.edges.Get(maxEdgeKey);
          leftNode.edges.Remove(maxEdgeKey);
          leftNode.AddEdge(new exports.Edge(maxEdge.toNodeId, this.LeftEdge(nodes, rightNode).data));
        }
        if ((leftNode.edges.Length() + rightNode.edges.Length()) <= treeOrder) {
          for (i = _i = 0, _ref = leftNode.edges.Length() - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            removalKey = leftNode.edges.Keys()[i];
            rightNode.AddEdge(leftNode.edges.Get(removalKey));
          }
          nodes.SetNode(rightNodeId, rightNode);
          nodes.Remove(leftNodeId);
          node.edges.Remove(leftKey);
          if (node.edges.Length() === 1) {
            node.SetData(rightNode.data);
            node.edges.Clear();
            _ref1 = rightNode.edges.Array();
            for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
              childEdge = _ref1[_j];
              node.AddEdge(childEdge);
            }
            nodes.Remove(rightNodeId);
          }
          return new exports.RemovalResult(node.edges.Length(), true, true);
        } else {
          numberToTake = Math.floor((leftNode.edges.Length() + rightNode.edges.Length()) / 2) - leftNode.edges.Length();
          if (numberToTake > 0) {
            for (i = _k = 0; 0 <= numberToTake ? _k <= numberToTake : _k >= numberToTake; i = 0 <= numberToTake ? ++_k : --_k) {
              removalKey = rightNode.edges.Keys()[0];
              leftNode.AddEdge(rightNode.edges.Get(removalKey));
              rightNode.edges.Remove(removalKey);
            }
            node.edges.Remove(leftKey);
            node.AddEdge(new exports.Edge(leftNodeId, this.LeftEdge(nodes, rightNode).data));
            nodes.SetNode(leftNodeId, leftNode);
            nodes.SetNode(rightNodeId, rightNode);
            return new exports.RemovalResult(node.edges.Length(), true, true);
          } else {
            if (numberToTake < 0) {
              for (i = _l = 0, _ref2 = Math.abs(numberToTake); 0 <= _ref2 ? _l <= _ref2 : _l >= _ref2; i = 0 <= _ref2 ? ++_l : --_l) {
                removalKey = leftNode.edges.Keys()[leftNode.edges.Length() - 1];
                rightNode.AddEdge(leftNode.edges.Get(removalKey));
                leftNode.edges.Remove(removalKey);
              }
              node.edges.Remove(leftKey);
              node.AddEdge(new exports.Edge(leftNodeId, this.LeftEdge(nodes, rightNode).data));
              nodes.SetNode(leftNodeId, leftNode);
              nodes.SetNode(rightNodeId, rightNode);
              return new exports.RemovalResult(node.edges.Length(), true, true);
            }
            throw "Nothing to copy";
          }
        }
      };

      return BPlusTreeOperationsClass;

    })();
    return exports.BPlusTreeOperations = new BPlusTreeOperationsClass();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.CollectionInstancesService = (function() {

      function CollectionInstancesService(provider, typesService) {
        this.provider = provider;
        this.typesService = typesService;
        this.bplusTreeOrder = 100;
      }

      CollectionInstancesService.prototype.NewInstance = function(typeId) {
        var id, node;
        id = exports.Guid.Create();
        node = exports.BPlusTreeOperations.CreateRootNode(exports.NodeType.Collection, id);
        this.provider.SetNode(id, node);
        exports.BPlusTreeOperations.InsertEdge(this.provider, id, new exports.Edge(typeId, new exports.EdgeData(exports.EdgeType.OfType, null)), this.bplusTreeOrder);
        this.provider.SetNode(id, node);
        return id;
      };

      CollectionInstancesService.prototype.AddScalar = function(instanceId, itemTypeId, value, key) {
        var data, id, node;
        if (key == null) {
          key = "";
        }
        id = exports.Guid.Create();
        node = new exports.Node(exports.NodeType.Scalar, value);
        this.provider.SetNode(id, node);
        if (key === "") {
          data = exports.Guid.Create();
        } else {
          data = key;
        }
        return exports.BPlusTreeOperations.InsertEdge(this.provider, instanceId, new exports.Edge(id, new exports.EdgeData(exports.EdgeType.ListItem, data)), this.bplusTreeOrder);
      };

      CollectionInstancesService.prototype.AddReference = function(instanceId, referenceId, key) {
        var data;
        if (key == null) {
          key = "";
        }
        if (key === "") {
          data = exports.Guid.Create();
        } else {
          data = key;
        }
        return exports.BPlusTreeOperations.InsertEdge(this.provider, instanceId, new exports.Edge(referenceId, new exports.EdgeData(exports.EdgeType.ListItem, data)), this.bPlusTreeOrder);
      };

      CollectionInstancesService.prototype.Clear = function(instanceId) {
        var enumerator, key, removalKeys, _i, _len, _results;
        removalKeys = [];
        enumerator = this.GetEnumerator(instanceId);
        while (enumerator.MoveNext()) {
          removalKeys.push(enumerator.Current().data);
        }
        _results = [];
        for (_i = 0, _len = removalKeys.length; _i < _len; _i++) {
          key = removalKeys[_i];
          _results.push(exports.BPlusTreeOperations.RemoveEdge(this.provider, instanceId, key, this.bPlusTreeOrder));
        }
        return _results;
      };

      CollectionInstancesService.prototype.ContainsScalar = function(instanceId, value, key) {
        var enumerator, node;
        if (key == null) {
          key = "";
        }
        if (key === "") {
          enumerator = this.GetEnumerator(instanceId);
          while (enumerator.MoveNext()) {
            node = this.provider.GetNode(enumerator.Current().toNodeId, exports.NodeAccess.Read);
            if (node.data.equlas(value)) {
              return true;
            }
          }
          return false;
        } else {
          return exports.BPlusTreeOperations.TryFindEdge(this.provider, instanceId, new exports.EdgeData(exports.EdgeType.ListItem, key)).result;
        }
      };

      CollectionInstancesService.prototype.ContainsReference = function(instanceId, referenceId, key) {
        var enumerator;
        if (key == null) {
          key = "";
        }
        if (key === "") {
          enumerator = this.GetEnumerator(instanceId);
          while (enumerator.MoveNext()) {
            if (exports.UTILS.equals(enumerator.Current().toNodeId, referenceId)) {
              return true;
            }
          }
          return false;
        } else {
          return exports.BPlusTreeOperations.TryFindEdge(this.provider, instanceId, new exports.EdgeData(exports.EdgeType.ListItem, key)).result;
        }
      };

      CollectionInstancesService.prototype.Count = function(instanceId) {
        return exports.BPlusTreeOperations.Count(this.provider, instanceId, exports.EdgeType.ListItem);
      };

      CollectionInstancesService.prototype.MaxOrderedIdentifier = function(instanceId) {
        if (this.Count(instanceId) === 0) {
          return 0;
        } else {
          return exports.BPlusTreeOperations.RightEdge(this.provider, this.provider.GetNode(instanceId, exports.NodeAccess.Read)).data.data;
        }
      };

      CollectionInstancesService.prototype.RemoveScalar = function(instanceId, value, key) {
        var enumerator, node;
        if (key == null) {
          key = "";
        }
        if (key === "") {
          enumerator = this.GetEnumerator(instanceId);
          while (enumerator.MoveNext()) {
            node = this.provider.GetNode(enumerator.Current().toNodeId, exports.NodeAccess.Read);
            if (exports.UTILS.equals(node.data, value)) {
              return exports.BPlusTreeOperations.RemoveEdge(this.provider, instanceId, enumerator.Current().data, this.bplusTreeOrder);
            }
          }
          return false;
        } else {
          return exports.BPlusTreeOperations.RemoveEdge(this.provider, instanceId, new exports.EdgeData(exports.EdgeType.ListItem, key), this.bplusTreeOrder);
        }
      };

      CollectionInstancesService.prototype.RemoveReference = function(instanceId, referenceId, key) {
        var enumerator;
        if (key == null) {
          key = "";
        }
        if (key === "") {
          enumerator = this.GetEnumerator(instanceId);
          while (enumerator.MoveNext()) {
            if (exports.UTILS.equals(enumerator.Current().toNodeId, referenceId)) {
              return exports.BPlusTreeOperations.RemoveEdge(this.provider, instanceId, enumerator.Current().data, this.bplusTreeOrder);
            }
          }
          return false;
        } else {
          return exports.BPlusTreeOperations.RemoveEdge(this.provider, instanceId, new exports.EdgeData(exports.EdgeType.ListItem, key), this.bplusTreeOrder);
        }
      };

      CollectionInstancesService.prototype.IsCollectionInstance = function(referenceId) {
        var data, isEmptyGuid, isInternalNode, isLeafNode;
        data = this.provider.GetNode(referenceId, exports.NodeAccess.Read).data;
        if (data === null) {
          data = exports.Guid.EMPTY;
        }
        isEmptyGuid = exports.UTILS.equals(data, exports.Guid.EMPTY);
        isInternalNode = exports.UTILS.equals(data, exports.BPlusTreeOperations.InternalNodeData);
        isLeafNode = exports.UTILS.equals(data, exports.BPlusTreeOperations.LeafNodeData);
        return !isEmptyGuid && isInternalNode || isLeafNode;
      };

      CollectionInstancesService.prototype.GetInstanceTypeId = function(referenceId) {
        var rez;
        rez = exports.BPlusTreeOperations.TryFindEdge(this.provider, referenceId, new exports.EdgeData(exports.EdgeType.OfType, null));
        if (rez.result) {
          return rez.value.toNodeId;
        } else {
          return exports.Guid.EMPTY;
        }
      };

      CollectionInstancesService.prototype.GetEnumerator = function(instanceId) {
        return exports.BPlusTreeOperations.GetEnumerator(this.provider, instanceId, exports.EdgeType.ListItem);
      };

      CollectionInstancesService.prototype.TryFindReferenceByKey = function(instanceId, key) {
        var rez;
        rez = exports.BPlusTreeOperations.TryFindEdge(this.provider, instanceId, new exports.EdgeData(exports.EdgeType.ListItem, key));
        if (rez.result) {
          return {
            "result": true,
            "value": rez.value
          };
        } else {
          return {
            "result": false,
            "value": exports.Guid.EMPTY
          };
        }
      };

      return CollectionInstancesService;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.DictionaryInstancesService = (function() {

      function DictionaryInstancesService(provider, typesService) {
        this.provider = provider;
        this.typesService = typesService;
        this.bplusTreeOrder = 100;
      }

      DictionaryInstancesService.prototype.NewInstance = function(typeId) {
        var id, node;
        id = exports.Guid.Create();
        node = exports.BPlusTreeOperations.CreateRootNode(exports.NodeType.Dictionary, id);
        this.provider.SetNode(id, node);
        exports.BPlusTreeOperations.InsertEdge(this.provider, id, new exports.Edge(typeId, new exports.EdgeData(exports.EdgeType.OfType, null)), this.bplusTreeOrder);
        this.provider.SetNode(id, node);
        return id;
      };

      DictionaryInstancesService.prototype.AddScalar = function(instanceId, itemTypeId, key, value) {
        var id, node;
        id = exports.Guid.Create();
        node = new exports.Node(exports.NodeType.Scalar, value);
        this.provider.SetNode(id, node);
        return exports.BPlusTreeOperations.InsertEdge(this.provider, instanceId, new exports.Edge(id, new exports.EdgeData(exports.EdgeType.ListItem, key)), this.bplusTreeOrder);
      };

      DictionaryInstancesService.prototype.AddReference = function(instanceId, key, referenceId) {
        return exports.BPlusTreeOperations.InsertEdge(this.provider, instanceId, new exports.Edge(referenceId, new exports.EdgeData(exports.EdgeType.ListItem, key)), this.bplusTreeOrder);
      };

      DictionaryInstancesService.prototype.ContainsKey = function(instanceId, key) {
        return exports.BPlusTreeOperations.TryFindEdge(this.provider, instanceId, new exports.EdgeData(exports.EdgeType.ListItem, key)).result;
      };

      DictionaryInstancesService.prototype.GetEnumerator = function(instanceId) {
        return exports.BPlusTreeOperations.GetEnumerator(this.provider, instanceId, exports.EdgeType.ListItem);
      };

      DictionaryInstancesService.prototype.Remove = function(instanceId, key) {
        return BPlusTreeOperations.RemoveEdge(this.provider, instanceId, new exports.EdgeData(exports.EdgeType.ListItem, key), this.bplusTreeOrder);
      };

      DictionaryInstancesService.prototype.TryGetScalar = function(instanceId, key, value) {
        var rez;
        rez = BPlusTreeOperations.TryFindEdge(this.provider, instanceId, new exports.EdgeData(exports.EdgeType.ListItem, key));
        if (rez.result) {
          value = this.provider.GetNode(rez.value.toNodeId, exports.NodeAccess.Read).data;
          return {
            "result": true,
            "value": value
          };
        } else {
          return {
            "result": false,
            "value": null
          };
        }
      };

      DictionaryInstancesService.prototype.TryGetReference = function(instanceId, key) {
        var rez;
        rez = exports.BPlusTreeOperations.TryFindEdge(this.provider, instanceId, new exports.EdgeData(exports.EdgeType.ListItem, key));
        if (rez.result) {
          return {
            "result": rez.result,
            "value": rez.value.toNodeId
          };
        } else {
          return {
            "result": false,
            "value": exports.Guid.EMPTY
          };
        }
      };

      DictionaryInstancesService.prototype.SetScalar = function(instanceId, itemTypeId, key, value) {
        var id, node;
        id = exports.Guid.Create();
        node = new exports.Node(exports.NodeType.Scalar, value);
        this.provider.SetNode(id, node);
        if (!exports.BPlusTreeOperations.TrySetEdgeToNode(this.provider, instanceId, new exports.EdgeData(EdgeType.ListItem, key), id)) {
          throw "Item not found with the specified key";
        }
      };

      DictionaryInstancesService.prototype.SetReference = function(instanceId, key, referenceId) {
        if (!exports.BPlusTreeOperations.TrySetEdgeToNode(this.provider, instanceId, new exports.EdgeData(exports.EdgeType.ListItem, key), referenceId)) {
          throw "Item not found with the specified key";
        }
      };

      DictionaryInstancesService.prototype.Clear = function(instanceId) {
        var enumerator, key, removalKeys, _i, _len, _results;
        removalKeys = [];
        enumerator = this.GetEnumerator(instanceId);
        while (enumerator.MoveNext()) {
          removalKeys.Add(enumerator.Current().data);
        }
        _results = [];
        for (_i = 0, _len = removalKeys.length; _i < _len; _i++) {
          key = removalKeys[_i];
          _results.push(exports.BPlusTreeOperations.RemoveEdge(this.provider, instanceId, key, this.bplusTreeOrder));
        }
        return _results;
      };

      DictionaryInstancesService.prototype.Count = function(instanceId) {
        return exports.BPlusTreeOperations.Count(this.provider, instanceId, exports.EdgeType.ListItem);
      };

      return DictionaryInstancesService;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.TableElement = (function() {

      function TableElement(target, lastAccess) {
        this.target = target;
        this.accessCount = lastAccess;
      }

      TableElement.prototype.compareTo = function(other) {
        if (!other.hasOwnProperty("accessCount")) {
          throw "Other object has not field accessCount!";
        }
        if (this.accessCount < other.accessCount) {
          return -1;
        } else {
          if (this.accessCount > other.accessCount) {
            return 1;
          } else {
            return 0;
          }
        }
      };

      return TableElement;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.LimitedProxyMap = (function() {

      function LimitedProxyMap(minElements, maxElements) {
        this.minElements = minElements != null ? minElements : 50000;
        this.maxElements = maxElements != null ? maxElements : 100000;
        this.table = new exports.SortedList();
      }

      LimitedProxyMap.prototype.AddProxy = function(instanceId, proxy) {
        if (proxy === null) {
          throw "proxy object is null";
        }
        if (this.table.Length() > this.maxElements) {
          this.Cleanup();
        }
        if (!this.table.Contains(instanceId)) {
          return this.table.Add(instanceId, new exports.TableElement(proxy, 0));
        } else {
          return this.table[instanceId].accessCount++;
        }
      };

      LimitedProxyMap.prototype.TryGetProxy = function(instanceId) {
        var element, proxy;
        if (this.table.Contains(instanceId)) {
          element = this.table.Get(instanceId);
          proxy = element.target;
          element.accessCount++;
          return {
            "result": proxy !== null,
            "value": proxy
          };
        } else {
          return {
            "result": false,
            "value": null
          };
        }
      };

      LimitedProxyMap.prototype.Cleanup = function() {
        var item, key, nrToRemove, _i, _j, _len, _len1, _ref, _ref1, _results;
        if (this.table.Length() > this.minElements) {
          int(nrToRemove = table.Length() - this.minElements);
          _ref = this.table.Keys();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            key = _ref[_i];
            this.table.Remove(key);
            nrToRemove--;
            if (nrToRemove === 0) {
              break;
            }
          }
          _ref1 = this.table.Array();
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            item = _ref1[_j];
            _results.push(item.accessCount = 0);
          }
          return _results;
        }
      };

      LimitedProxyMap.prototype.UpgradeProxies = function(mapping) {
        var element, key, keys, newKey, reference, _i, _j, _len, _len1, _ref;
        keys = [];
        _ref = this.table.Keys();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          keys.push(key);
        }
        for (_j = 0, _len1 = keys.length; _j < _len1; _j++) {
          key = keys[_j];
          if (mapping.Contains(key)) {
            element = this.table.Get(key);
            reference = element.target;
            newKey = mapping.Get(key);
            exports.UTILS.SetItemId(reference, newKey);
            this.table.Add(newKey, element);
            this.table.Remove(key);
          }
        }
        return this.Cleanup();
      };

      LimitedProxyMap.prototype.InvalidateProxies = function(instances) {
        var key, target, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;
        if ((instances != null)) {
          _ref = this.table.Keys();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            key = _ref[_i];
            if (instances.Contains(key)) {
              target = (table.Get(key)).target;
              if (target != null) {
                _results.push(exports.UTILS.SetItemId(target, Guid.EMPTY));
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        } else {
          _ref1 = this.table.Keys();
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            key = _ref1[_j];
            target = this.table.Get(key).taget;
            if (target != null) {
              _results1.push(exports.UTILS.SetItemId(target, Guid.Empty));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }
      };

      return LimitedProxyMap;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.ProxyCreatorService = (function() {

      function ProxyCreatorService(types, interfaceToTypeIdMapping, interfaceToGeneratedMapping) {
        var type, _i, _len;
        if (types == null) {
          types = [];
        }
        if (interfaceToTypeIdMapping == null) {
          interfaceToTypeIdMapping = new exports.Dictionary();
        }
        if (interfaceToGeneratedMapping == null) {
          interfaceToGeneratedMapping = new exports.Dictionary();
        }
        this.proxyTypesFromInterfaces = new exports.Dictionary();
        this.proxyTypesFromIDs = new exports.Dictionary();
        this.typeIdToType = new exports.Dictionary();
        for (_i = 0, _len = types.length; _i < _len; _i++) {
          type = types[_i];
          if (type.isInterface) {
            this.RegisterTypeMapping(type, interfaceToGeneratedMapping.Get(type), interfaceToTypeIdMapping.Get(type));
          }
        }
      }

      ProxyCreatorService.prototype.NewObject = function(facade, instanceId, readOnly, type, typeId) {
        var proxyType;
        if ((typeId != null) && !exports.UTILS.equals(typeId, exports.Guid.EMPTY)) {
          proxyType = this.proxyTypesFromIDs.Get(typeId);
          type = this.typeIdToType.Get(typeId);
          if (proxyType.hasOwnProperty('Initializer')) {
            proxyType.Initializer(proxyType.type.id);
          }
          return new proxyType(facade, instanceId, readOnly, type);
        } else {
          proxyType = this.proxyTypesFromInterfaces.Get(type);
          if (proxyType.hasOwnProperty('Initializer')) {
            proxyType.Initializer(proxyType.type.id);
          }
          return new proxyType(facade, instanceId, readOnly, type);
        }
      };

      ProxyCreatorService.prototype.RegisterTypeMapping = function(interfaceType, proxyType, typeId) {
        if (!interfaceType.isInterface) {
          throw "Interface type expected : " + interfaceType.name;
        }
        this.proxyTypesFromIDs.Add(typeId, proxyType);
        this.proxyTypesFromInterfaces.Add(interfaceType, proxyType);
        return this.typeIdToType.Add(typeId, interfaceType);
      };

      return ProxyCreatorService;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    exports.CollectionEnumerator = (function() {

      function CollectionEnumerator(elementType, edgeEnumerator, isScalar, isReadOnly, objectInstancesService, proxyFacade) {
        this.elementType = elementType;
        this.edgeEnumerator = edgeEnumerator;
        this.isScalar = isScalar;
        this.isReadOnly = isReadOnly;
        this.objectInstancesService = objectInstancesService;
        this.proxyFacade = proxyFacade;
      }

      CollectionEnumerator.prototype.Current = function() {
        var currentValue;
        if (this.isScalar) {
          currentValue = this.objectInstancesService.GetScalarInstanceValue(this.edgeEnumerator.Current().toNodeId);
          if ((currentValue != null)) {
            return currentValue.value;
          } else {
            return currentValue;
          }
        } else {
          return this.proxyFacade.GetProxyInstance(this.isReadOnly, this.edgeEnumerator.Current().toNodeId, this.elementType);
        }
      };

      CollectionEnumerator.prototype.MoveNext = function() {
        return this.edgeEnumerator.MoveNext();
      };

      CollectionEnumerator.prototype.Reset = function() {
        return this.edgeEnumerator.Reset();
      };

      return CollectionEnumerator;

    })();
    exports.DictionaryEnumerator = (function() {

      function DictionaryEnumerator(elementType, edgeEnumerator, isScalar, isReadOnly, objectInstancesService, proxyFacade, keyIsScalar) {
        this.elementType = elementType;
        this.edgeEnumerator = edgeEnumerator;
        this.isScalar = isScalar;
        this.isReadOnly = isReadOnly;
        this.objectInstancesService = objectInstancesService;
        this.proxyFacade = proxyFacade;
        this.keyIsScalar = keyIsScalar;
      }

      DictionaryEnumerator.prototype.Current = function() {
        var key, value;
        if (this.isScalar) {
          value = this.objectInstancesService.GetScalarInstanceValue(this.edgeEnumerator.Current().toNodeId);
          if ((value != null)) {
            value = value.value;
          } else {
            value = null;
          }
        } else {
          value = this.proxyFacade.GetProxyInstance(this.isReadOnly, this.edgeEnumerator.Current().toNodeId, this.elementType);
        }
        if (this.keyIsScalar) {
          key = this.edgeEnumerator.Current().data.data.value;
        } else {
          key = this.edgeEnumerator.Current().data.data;
        }
        return {
          "key": key,
          "value": value
        };
      };

      DictionaryEnumerator.prototype.MoveNext = function() {
        return this.edgeEnumerator.MoveNext();
      };

      DictionaryEnumerator.prototype.Reset = function() {
        return this.edgeEnumerator.Reset();
      };

      return DictionaryEnumerator;

    })();
    return exports.RuntimeProxyFacade = (function() {

      function RuntimeProxyFacade(typesService, objectInstancesService, immutableInstancesService, collectionInstancesService, immutableCollectionInstancesService, dictionaryInstancesService, immutableDictionaryInstancesService, mutableProxyMap, immutableProxyMap, proxyCreatorService) {
        this.typesService = typesService;
        this.objectInstancesService = objectInstancesService;
        this.immutableInstancesService = immutableInstancesService;
        this.collectionInstancesService = collectionInstancesService;
        this.immutableCollectionInstancesService = immutableCollectionInstancesService;
        this.dictionaryInstancesService = dictionaryInstancesService;
        this.immutableDictionaryInstancesService = immutableDictionaryInstancesService;
        this.mutableProxyMap = mutableProxyMap;
        this.immutableProxyMap = immutableProxyMap;
        this.proxyCreatorService = proxyCreatorService;
      }

      RuntimeProxyFacade.prototype.CreateCollection = function(type) {
        var instanceId, newType, proxy, typeId;
        newType = iog.IOGType.CreateCollectionWithGenericType(type.genericArguments[0].GetType());
        typeId = this.typesService.GetTypeIdCached(newType);
        if (this.typesService.IsCollectionType(typeId)) {
          instanceId = this.collectionInstancesService.NewInstance(typeId);
          proxy = this.proxyCreatorService.NewObject(this, instanceId, false, newType);
          this.mutableProxyMap.AddProxy(instanceId, proxy);
          return proxy;
        } else {
          return null;
        }
        return {
          CreateDictionary: function(type) {
            newType = iog.IOGType.CreateDictionaryWithGenericTypes(type.genericArguments[0].GetType(), type.genericArguments[1].GetType());
            typeId = this.typesService.GetTypeIdCached(newType);
            if (this.typesService.IsDictionaryType(typeId)) {
              instanceId = this.dictionaryInstancesService.NewInstance(typeId);
              proxy = this.proxyCreatorService.NewObject(this, instanceId, false, newType);
              this.mutableProxyMap.AddProxy(instanceId, proxy);
              return proxy;
            } else {
              return null;
            }
          }
        };
      };

      RuntimeProxyFacade.prototype.GetInstanceMemberValue = function(instanceId, memberId, isScalar, isReadOnly) {
        var isPermanent, referenceId, rez;
        if (exports.UTILS.equals(instanceId, exports.Guid.EMPTY)) {
          throw "Instance was accessed outside of workspace scope or it was rolled back.";
        }
        if (isScalar) {
          if (isReadOnly) {
            return this.immutableInstancesService.GetScalarInstanceMember(instanceId, memberId);
          } else {
            return this.objectInstancesService.GetScalarInstanceMember(instanceId, memberId);
          }
        } else {
          isPermanent = false;
          referenceId = exports.Guid.EMPTY;
          if (isReadOnly) {
            rez = this.immutableInstancesService.GetReferenceInstanceMember(instanceId, memberId);
            referenceId = rez.guid;
          } else {
            rez = this.objectInstancesService.GetReferenceInstanceMember(instanceId, memberId);
            referenceId = rez.guid;
          }
          return this.GetProxyInstance(isReadOnly || rez.isPermanet, referenceId, exports.Guid.EMPTY);
        }
      };

      RuntimeProxyFacade.prototype.GetProxyInstance = function(isReadOnly, referenceId, typeId) {
        var collectionService, map, objectService, proxy, rez;
        if (exports.UTILS.equals(referenceId, exports.Constants.NullReferenceNodeId)) {
          return null;
        } else {
          proxy = null;
          map = this.mutableProxyMap;
          collectionService = this.collectionInstancesService;
          objectService = this.objectInstancesService;
          if (isReadOnly) {
            map = this.immutableProxyMap;
            collectionService = this.immutableCollectionInstancesService;
            objectService = this.immutableInstancesService;
          }
          rez = map.TryGetProxy(referenceId);
          if (!rez.result) {
            if (exports.UTILS.equals(typeId, exports.Guid.EMPTY)) {
              if (collectionService.IsCollectionInstance(referenceId)) {
                typeId = collectionService.GetInstanceTypeId(referenceId);
              } else {
                typeId = objectService.GetInstanceTypeId(referenceId);
              }
            }
            proxy = this.proxyCreatorService.NewObject(this, referenceId, isReadOnly, null, typeId);
            map.AddProxy(referenceId, proxy);
            return proxy;
          } else {
            return rez.value;
          }
        }
      };

      RuntimeProxyFacade.prototype.SetInstanceMemberValue = function(instanceId, memberId, value, isScalar, isReadOnly) {
        var referenceId;
        if (exports.UTILS.equals(instanceId, exports.Guid.EMPTY)) {
          throw "Instance was accessed outside of workspace scope or it was rolled back.";
        }
        if (isReadOnly) {
          throw "Setting property on read only instance not allowed";
        }
        if (isScalar) {
          return this.objectInstancesService.SetScalarInstanceMember(instanceId, memberId, value);
        } else {
          referenceId = exports.Constants.NullReferenceNodeId;
          if (value !== null) {
            if (!exports.UTILS.HasItemId(value)) {
              throw "Object set is not a valid IOG proxy";
            }
            referenceId = exports.UTILS.GetItemId(value);
          }
          return this.objectInstancesService.SetReferenceInstanceMember(instanceId, memberId, referenceId);
        }
      };

      RuntimeProxyFacade.prototype.CollectionAdd = function(instanceId, valueTypeId, value, isScalar) {
        return this.PerformAdd(instanceId, valueTypeId, value, isScalar, false, false);
      };

      RuntimeProxyFacade.prototype.CollectionAddOrdered = function(instanceId, valueTypeId, value, isScalar) {
        return this.PerformAdd(instanceId, valueTypeId, value, isScalar, false, true);
      };

      RuntimeProxyFacade.prototype.PerformAdd = function(instanceId, valueTypeId, value, isScalar, isSet, isOrdered) {
        var maxId, primaryKey, primaryKeyId, referenceId;
        if (exports.UTILS.equals(instanceId, exports.Guid.EMPTY)) {
          throw "Instance was accessed outside of workspace scope or it was rolled back.";
        }
        if (isScalar) {
          if (!isSet) {
            if (isOrdered) {
              maxId = this.collectionInstancesService.MaxOrderedIdentifier(instanceId);
              return this.collectionInstancesService.AddScalar(instanceId, valueTypeId, value, maxId + 1);
            } else {
              return this.collectionInstancesService.AddScalar(instanceId, valueTypeId, value);
            }
          } else {
            return this.collectionInstancesService.AddScalar(instanceId, valueTypeId, value, value);
          }
        } else {
          referenceId = exports.Constants.NullReferenceNodeId;
          primaryKey = null;
          if ((value != null)) {
            if (!exports.UTILS.HasItemId(value)) {
              throw "Object set is not a valid IOG proxy";
            }
            referenceId = exports.UTILS.GetItemId(value);
            primaryKeyId = exports.UTILS.GetItemPrimaryKeyId(value);
            if (!exports.UTILS.equals(primaryKeyId, exports.Guid.EMPTY)) {
              primaryKey = this.objectInstancesService.GetScalarInstanceMember(referenceId, primaryKeyId);
            }
            if (isOrdered) {
              maxId = this.collectionInstancesService.MaxOrderedIdentifier(instanceId);
              return this.collectionInstancesService.AddReference(instanceId, referenceId, maxId + 1);
            } else {
              if (!(primaryKey != null)) {
                return this.collectionInstancesService.AddReference(instanceId, referenceId);
              } else {
                return this.collectionInstancesService.AddReference(instanceId, referenceId, primaryKey);
              }
            }
          }
        }
      };

      RuntimeProxyFacade.prototype.CollectionClear = function(instanceId) {
        if (exports.UTILS.equals(instanceId, exports.Guid.EMPTY)) {
          throw "Instance was accessed outside of workspace scope or it was rolled back.";
        }
        this.collectionInstancesService.Clear(instanceId);
      };

      RuntimeProxyFacade.prototype.CollectionContains = function(instanceId, value, isScalar, isReadOnly) {
        return this.PerformContains(instanceId, value, isScalar, false, isReadOnly, false);
      };

      RuntimeProxyFacade.prototype.CollectionContainsOrdered = function(instanceId, value, isScalar, isReadOnly) {
        return this.PerformContains(instanceId, value, isScalar, false, isReadOnly, true);
      };

      RuntimeProxyFacade.prototype.PerformContains = function(instanceId, value, isScalar, isSet, isReadOnly, isOrdered) {
        var primaryKey, primaryKeyId, referenceId, service;
        if (exports.UTILS.equals(instanceId, exports.Guid.EMPTY)) {
          throw "Instance was accessed outside of workspace scope or it was rolled back.";
        }
        service = this.collectionInstancesService;
        if (isReadOnly) {
          service = this.immutableCollectionInstancesService;
        }
        if (isScalar) {
          if (!isSet) {
            return service.ContainsScalar(instanceId, value);
          } else {
            return service.ContainsScalar(instanceId, value, value);
          }
        } else {
          referenceId = Constants.NullReferenceNodeId;
          primaryKey = null;
          if ((value != null)) {
            if (!exports.UTILS.HasItemId(value)) {
              throw "Object set is not a valid IOG proxy";
            }
            referenceId = exports.UTILS.GetItemId(value);
            primaryKeyId = exports.UTILS.GetItemPrimaryKeyId(value);
            if (!exports.UTILS.equals(primaryKeyId, exports.Guid.EMPTY)) {
              primaryKey = this.objectInstancesService.GetScalarInstanceMember(referenceId, primaryKeyId);
            }
          }
          if (primaryKey === null || isOrdered) {
            return service.ContainsReference(instanceId, referenceId);
          } else {
            return service.ContainsReference(instanceId, referenceId, primaryKey);
          }
        }
      };

      RuntimeProxyFacade.prototype.CollectionCopyTo = function(elementTypeId, instanceId, isScalar, isReadOnly, array, arrayIndex) {
        var enumerator, index, _results;
        if (exports.UTILS.equals(instanceId, exports.Guid.EMPTY)) {
          throw "Instance was accessed outside of workspace scope or it was rolled back.";
        }
        enumerator = this.CollectionGetEnumerator(elementTypeId, instanceId, isScalar, isReadOnly);
        index = arrayIndex;
        _results = [];
        while (enumerator.MoveNext()) {
          array.SetValue(enumerator.Current, index);
          _results.push(index++);
        }
        return _results;
      };

      RuntimeProxyFacade.prototype.CollectionCount = function(instanceId) {
        if (exports.UTILS.equals(instanceId, exports.Guid.EMPTY)) {
          throw "Instance was accessed outside of workspace scope or it was rolled back.";
        }
        return this.collectionInstancesService.Count(instanceId);
      };

      RuntimeProxyFacade.prototype.CollectionRemove = function(instanceId, value, isScalar) {
        return this.PerformRemove(instanceId, value, isScalar, false, false);
      };

      RuntimeProxyFacade.prototype.CollectionRemoveOrdered = function(instanceId, value, isScalar) {
        return this.PerformRemove(instanceId, value, isScalar, false, true);
      };

      RuntimeProxyFacade.prototype.PerformRemove = function(instanceId, value, isScalar, isSet, isOrdered) {
        var primaryKey, primaryKeyId, referenceId;
        if (exports.UTILS.equals(instanceId, exports.Guid.EMPTY)) {
          throw "Invalid instance revision ID";
        }
        if (isScalar) {
          if (!isSet) {
            return this.collectionInstancesService.RemoveScalar(instanceId, value);
          } else {
            return this.collectionInstancesService.RemoveScalar(instanceId, value, value);
          }
        } else {
          referenceId = exports.Constants.NullReferenceNodeId;
          primaryKey = null;
          if (value !== null) {
            if (!exports.UTILS.HasItemId(value)) {
              throw "Object set is not a valid IOG proxy";
            }
            referenceId = exports.UTILS.GetItemId(value);
            primaryKeyId = exports.UTILS.GetItemPrimaryKeyId(value);
            if (!exports.UTILS.equals(primaryKeyId, exports.Guid.EMPTY)) {
              primaryKey = this.objectInstancesService.GetScalarInstanceMember(referenceId, primaryKeyId);
            }
          }
          if (primaryKey === null || isOrdered) {
            return this.collectionInstancesService.RemoveReference(instanceId, referenceId);
          } else {
            return this.collectionInstancesService.RemoveReference(instanceId, referenceId, primaryKey);
          }
        }
      };

      RuntimeProxyFacade.prototype.IsScalarType = function(typeId) {
        return this.typesService.IsScalarType(typeId);
      };

      RuntimeProxyFacade.prototype.GetTypeId = function(type) {
        return this.typesService.GetTypeId(type);
      };

      RuntimeProxyFacade.prototype.CollectionGetEnumerator = function(elementType, instanceId, isScalar, isReadOnly) {
        var enumeration, var1, var2;
        if (isReadOnly) {
          var1 = this.immutableCollectionInstancesService.GetEnumerator(instanceId);
        } else {
          var1 = this.collectionInstancesService.GetEnumerator(instanceId);
        }
        if (isReadOnly) {
          var2 = this.immutableInstancesService;
        } else {
          var2 = this.objectInstancesService;
        }
        enumeration = new exports.CollectionEnumerator(elementType, var1, isScalar, isReadOnly, var2, this);
        return enumeration;
      };

      RuntimeProxyFacade.prototype.CollectionTryFindPrimaryKey = function(elementType, instanceId, isScalar, isReadOnly, key) {
        var referenceId, rez, value;
        referenceId = exports.Guid.EMPTY;
        rez = this.collectionInstancesService.TryFindReferenceByKey(instanceId, key);
        if (rez.result) {
          value = this.GetProxyInstance(isReadOnly, referenceId, elementType);
          return {
            "result": true,
            "value": value
          };
        } else {
          return {
            "result": false,
            "value": exports.UTILS.Default(value)
          };
        }
      };

      RuntimeProxyFacade.prototype.CollectionFindByPrimaryKey = function(elementType, instanceId, isScalar, isReadOnly, key) {
        var referenceId, rez;
        referenceId = exports.Guid.EMPTY;
        rez = this.collectionInstancesService.TryFindReferenceByKey(instanceId, key);
        if (rez.result) {
          return this.GetProxyInstance(isReadOnly, rez.value, elementType);
        } else {
          throw "Key not found";
        }
      };

      RuntimeProxyFacade.prototype.CollectionContainsPrimaryKey = function(instanceId, key, isReadOnly) {
        var referenceId;
        referenceId = exports.Guid.EMPTY;
        if (isReadOnly) {
          return this.immutableCollectionInstancesService.TryFindReferenceByKey(instanceId, key).result;
        } else {
          return this.collectionInstancesService.TryFindReferenceByKey(instanceId, key).result;
        }
      };

      RuntimeProxyFacade.prototype.DictionaryAdd = function(instanceId, elementType, isScalar, key, value) {
        var referenceId;
        if (exports.UTILS.equals(instanceId, exports.Guid.EMPTY)) {
          throw "Instance was accessed outside of workspace scope or it was rolled back.";
        }
        if (isScalar) {
          return this.dictionaryInstancesService.AddScalar(instanceId, elementType, key, value);
        } else {
          referenceId = exports.Constants.NullReferenceNodeId;
          if (value !== null) {
            if (!exports.UTILS.HasItemId(value)) {
              throw "Object set is not a valid IOG proxy";
            }
            referenceId = exports.UTILS.GetItemId(value);
          }
          return this.dictionaryInstancesService.AddReference(instanceId, key, referenceId);
        }
      };

      RuntimeProxyFacade.prototype.DictionaryContainsKey = function(instanceId, key, readOnly) {
        if (readOnly) {
          return this.immutableDictionaryInstancesService.Contains(instanceId, key);
        } else {
          return this.dictionaryInstancesService.ContainsKey(instanceId, key);
        }
      };

      RuntimeProxyFacade.prototype.DictionaryKeys = function(instanceId, readOnly) {
        var enumerator, keys, service;
        service = this.dictionaryInstancesService;
        if (readOnly) {
          service = this.immutableDictionaryInstancesService;
        }
        keys = [];
        enumerator = service.GetEnumerator(instanceId);
        while (enumerator.MoveNext()) {
          keys.Add(enumerator.Current().data.data);
        }
        return keys;
      };

      RuntimeProxyFacade.prototype.DictionaryRemove = function(instanceId, key) {
        return this.dictionaryInstancesService.Remove(instanceId, key);
      };

      RuntimeProxyFacade.prototype.DictionaryTryGetValue = function(instanceId, elementTypeId, isSclar, readOnly, key, type) {
        var referenceId, rez, value;
        if (isSclar) {
          rez = this.dictionaryInstancesService.TryGetScalar(instanceId, key);
          return rez;
        } else {
          referenceId = exports.Guid.EMPTY;
          value = exports.UTILS.Default(type);
          rez = this.dictionaryInstancesService.TryGetReference(instanceId, key);
          if (rez.result) {
            value = this.GetProxyInstance(readOnly, rez.value, elementTypeId);
            return {
              "result": true,
              "value": value
            };
          } else {
            return {
              "result": false,
              "value": null
            };
          }
        }
      };

      RuntimeProxyFacade.prototype.DictionaryValues = function(instanceId, elementTypeId, isSclar, readOnly) {
        var enumerator, values;
        values = [];
        enumerator = this.dictionaryInstancesService.GetEnumerator(instanceId);
        while (enumerator.MoveNext()) {
          values.Add(this.DictionaryGetValue(instanceId, elementTypeId, isSclar, readOnly, enumerator.Current().data.data));
        }
        return values;
      };

      RuntimeProxyFacade.prototype.DictionaryGetValue = function(instanceId, elementTypeId, isSclar, readOnly, key) {
        var referenceId, rez, scalarValue;
        if (isSclar) {
          rez = this.dictionaryInstancesService.TryGetScalar(instanceId, key);
          scalarValue = null;
          if (rez.result) {
            return rez.value;
          } else {
            throw "Element not found with given key";
          }
        } else {
          referenceId = exports.Guid.EMPTY;
          rez = this.dictionaryInstancesService.TryGetReference(instanceId, key);
          if (rez.result) {
            return this.GetProxyInstance(readOnly, rez.value, elementTypeId);
          } else {
            throw "Element not found with given key";
          }
        }
      };

      RuntimeProxyFacade.prototype.DictionarySetValue = function(instanceId, elementTypeId, isSclar, readOnly, key, value) {
        if (isSclar) {
          return this.dictionaryInstancesService.SetScalar(instanceId, elementTypeId, key, value);
        } else {
          if (!exports.UTILS.HasItemId(value)) {
            throw "Object set is not a valid IOG proxy";
          }
          return this.dictionaryInstancesService.SetReference(instanceId, key, exports.UTILS.GetItemId(value));
        }
      };

      RuntimeProxyFacade.prototype.DictionaryClear = function(instanceId) {
        this.dictionaryInstancesService.Clear(instanceId);
      };

      RuntimeProxyFacade.prototype.DictionaryContains = function(instanceId, item, readOnly) {
        if (readOnly) {
          return this.immutableDictionaryInstancesService.ContainsKey(instanceId, item.key);
        } else {
          return this.dictionaryInstancesService.ContainsKey(instanceId, item.key);
        }
      };

      RuntimeProxyFacade.prototype.DictionaryCopyTo = function(instanceId, elementTypeId, isSclar, readOnly, array, arrayIndex) {
        var enumerator, index, key;
        index = arrayIndex;
        enumerator = this.dictionaryInstancesService.GetEnumerator(instanceId);
        while (enumerator.MoveNext()) {
          key = enumerator.Current().data.data;
          array[arrayIndex] = {
            "key": key,
            "value": this.DictionaryGetValue(instanceId, elementTypeId, isSclar, readOnly, key)
          };
          arrayIndex++;
          return;
        }
      };

      RuntimeProxyFacade.prototype.DictionaryCount = function(instanceId, readOnly) {
        if (readOnly) {
          return this.immutableDictionaryInstancesService.Count(instanceId);
        } else {
          return this.dictionaryInstancesService.Count(instanceId);
        }
      };

      RuntimeProxyFacade.prototype.DictionaryRemove = function(instanceId, item) {
        return this.dictionaryInstancesService.Remove(instanceId, item.key);
      };

      RuntimeProxyFacade.prototype.DictionaryGetEnumerator = function(instanceId, elementTypeId, isSclar, readOnly, keyIsScalar) {
        var val1, val2;
        if (readOnly) {
          val1 = this.immutableDictionaryInstancesService.GetEnumerator(instanceId);
        } else {
          val1 = this.dictionaryInstancesService.GetEnumerator(instanceId);
        }
        if (readOnly) {
          val2 = this.immutableInstancesService;
        } else {
          val2 = this.objectInstancesService;
        }
        return new exports.DictionaryEnumerator(elementTypeId, val1, isSclar, readOnly, val2, this, keyIsScalar);
      };

      RuntimeProxyFacade.prototype.SetAdd = function(instanceId, itemTypeId, item, isScalar) {
        this.PerformAdd(instanceId, itemTypeId, item, isScalar, true, false);
      };

      RuntimeProxyFacade.prototype.SetContains = function(instanceId, item, isScalar, isReadOnly) {
        return this.PerformContains(instanceId, item, isScalar, true, isReadOnly, false);
      };

      RuntimeProxyFacade.prototype.SetRemove = function(instanceId, item, isScalar) {
        return this.PerformRemove(instanceId, item, isScalar, true, false);
      };

      return RuntimeProxyFacade;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    var _StaticProxyFacade;
    exports.StaticProxyFacade = (function() {
      var _instance;

      function StaticProxyFacade() {}

      _instance = void 0;

      StaticProxyFacade.get = function() {
        if (_instance === void 0 || _instance === null) {
          throw "ProxyFacade not initialized";
        }
        return _instance;
      };

      StaticProxyFacade.Initialize = function(typesService) {
        var inst;
        if (typesService === null) {
          throw "typesService";
        }
        inst = new _StaticProxyFacade();
        inst.typesService = typesService;
        return _instance = inst;
      };

      return StaticProxyFacade;

    })();
    return _StaticProxyFacade = (function() {

      function _StaticProxyFacade() {
        this.typesService = null;
      }

      _StaticProxyFacade.prototype.GetTypeId = function(type) {
        return this.typesService.GetTypeIdCached(type);
      };

      _StaticProxyFacade.prototype.GetTypeMemberId = function(typeId, propertyName) {
        return this.typesService.GetTypeMemberId(typeId, propertyName);
      };

      _StaticProxyFacade.prototype.IsScalarType = function(typeId) {
        return this.typesService.IsScalarType(typeId);
      };

      _StaticProxyFacade.prototype.IsScalarMember = function(memberId) {
        var typeId;
        typeId = this.typesService.GetMemberTypeId(memberId);
        return this.typesService.IsScalarType(typeId);
      };

      _StaticProxyFacade.prototype.GetTypePrimaryKeyMemberId = function(typeId) {
        return this.typesService.GetTypePrimaryKeyMemberId(typeId);
      };

      _StaticProxyFacade.prototype.AreEqual = function(proxy1, proxy2) {
        if (proxy2 === null) {
          return false;
        }
        if (!exports.UTILS.HasItemId(proxy2)) {
          return false;
        }
        return exports.UTILS.equals(exports.UTILS.GetItemId(proxy1), exports.UTILS.GetItemId(proxy2));
      };

      _StaticProxyFacade.prototype.GetProxyHashCode = function(instance) {
        return exports.UTILS.GetItemId(instance).GetHashCode();
      };

      return _StaticProxyFacade;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.CollectionProxy = (function() {

      function CollectionProxy(__facade__, __instanceId__, __readOnly__, type) {
        this.__facade__ = __facade__;
        this.__instanceId__ = __instanceId__;
        this.__readOnly__ = __readOnly__;
        this.type = type;
        this.elementTypeId = exports.StaticProxyFacade.get().GetTypeId(this.type);
        this.genericArgumentType = this.type.genericArguments[0];
        this.genericArgumentTypeId = exports.StaticProxyFacade.get().GetTypeId(this.genericArgumentType);
        this.isScalar = exports.StaticProxyFacade.get().IsScalarType(this.genericArgumentTypeId);
      }

      /*
            This method is checking if key is scalara if it is of right type, and
            if it is not try to make it of right type. Also checking if proxy is
            proxy for rigth type. Return valid value.
      */


      CollectionProxy.prototype.CheckValue = function(value) {
        var newValue, valueType;
        valueType = this.genericArgumentType;
        if (valueType.isScalar) {
          if (exports.UTILS.IsInstaceOfScalar(value, valueType)) {
            newValue = value;
          } else {
            newValue = exports.IOGType.CreateScalar(valueType, value);
          }
        } else {
          newValue = value;
        }
        return newValue;
      };

      CollectionProxy.prototype.First = function() {
        var enumerator, hasFirst;
        enumerator = this.GetEnumerator();
        hasFirst = enumerator.MoveNext();
        if (hasFirst) {
          return enumerator.Current();
        } else {
          return null;
        }
      };

      CollectionProxy.prototype.Last = function() {
        var enumerator, i, size;
        enumerator = this.GetEnumerator();
        size = this.Count();
        i = 0;
        while (i < size) {
          i += 1;
          enumerator.MoveNext();
        }
        return enumerator.Current();
      };

      CollectionProxy.prototype.Get = function(index) {
        var enumerator, i;
        if (exports.UTILS.IsNumber(index)) {
          enumerator = this.__facade__.CollectionGetEnumerator(this.genericArgumentTypeId, this.__instanceId__, this.isScalar, this.__readOnly__);
          i = 0;
          while (i <= index) {
            i += 1;
            enumerator.MoveNext();
          }
          return enumerator.Current();
        } else {
          return null;
        }
      };

      CollectionProxy.prototype.Add = function(item) {
        if (this.__readOnly__) {
          throw "Operation not allowed for read only collection";
        }
        item = this.CheckValue(item);
        return this.__facade__.CollectionAdd(this.__instanceId__, this.genericArgumentTypeId, item, this.isScalar);
      };

      CollectionProxy.prototype.Clear = function() {
        if (this.__readOnly__) {
          throw "Operation not allowed for read only collection";
        }
        return this.__facade__.CollectionClear(this.__instanceId__);
      };

      CollectionProxy.prototype.Contains = function(item) {
        item = this.CheckValue(item);
        return this.__facade__.CollectionContains(this.__instanceId__, item, this.isScalar, this.__readOnly__);
      };

      CollectionProxy.prototype.CopyTo = function(array, arrayIndex) {
        this.__facade__.CollectionCopyTo(Guid.EMPTY, this.__instanceId__, this.isScalar, this.__readOnly__, array, arrayIndex);
      };

      CollectionProxy.prototype.Count = function() {
        return this.__facade__.CollectionCount(this.__instanceId__);
      };

      CollectionProxy.prototype.IsReadOnly = function() {
        return retunr(this.__readOnly__);
      };

      CollectionProxy.prototype.Remove = function(item) {
        if (this.__readOnly__) {
          throw "Operation not allowed for read only collection";
        }
        item = this.CheckValue(item);
        return this.__facade__.CollectionRemove(this.__instanceId__, item, this.isScalar);
      };

      CollectionProxy.prototype.GetEnumerator = function() {
        return this.__facade__.CollectionGetEnumerator(this.genericArgumentTypeId, this.__instanceId__, this.isScalar, this.__readOnly__);
      };

      CollectionProxy.prototype.TryFindPrimaryKey = function(key) {
        var rez;
        rez = this.__facade__.CollectionTryFindPrimaryKey(this.genericArgumentTypeId, this.__instanceId__, this.isScalar, this.IsReadOnly(), key);
        return rez.result;
      };

      CollectionProxy.prototype.FindByPrimaryKey = function(key) {
        return this.__facade__.CollectionFindByPrimaryKey(this.genericArgumentTypeId, this.__instanceId__, this.isScalar, this.IsReadOnly(), key);
      };

      CollectionProxy.prototype.ContainsPrimaryKey = function(key) {
        return this.__facade__.CollectionContainsPrimaryKey(this.__instanceId__, key, this.__readOnly__);
      };

      return CollectionProxy;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.CollectionProxySealed = (function() {

      function CollectionProxySealed(__facade__, __instanceId__, __readOnly__, type) {
        this.__facade__ = __facade__;
        this.__instanceId__ = __instanceId__;
        this.__readOnly__ = __readOnly__;
        this.type = type;
        this.elementTypeId = exports.StaticProxyFacade.get().GetTypeId(this.type);
        this.genericArgumentType = this.type.genericArguments[0];
        this.genericArgumentTypeId = exports.StaticProxyFacade.get().GetTypeId(this.genericArgumentType);
        this.isScalar = exports.StaticProxyFacade.get().IsScalarType(this.genericArgumentTypeId);
      }

      /*
            This method is checking if key is scalara if it is of right type, and
            if it is not try to make it of right type. Also checking if proxy is
            proxy for rigth type. Return valid value.
      */


      CollectionProxySealed.prototype.CheckValue = function(value) {
        var newValue, valueType;
        valueType = this.genericArgumentType;
        if (valueType.isScalar) {
          if (exports.UTILS.IsInstaceOfScalar(value, valueType)) {
            newValue = value;
          } else {
            newValue = exports.IOGType.CreateScalar(valueType, value);
          }
        } else {
          newValue = value;
        }
        return newValue;
      };

      CollectionProxySealed.prototype.First = function() {
        var enumerator, hasFirst;
        enumerator = this.GetEnumerator();
        hasFirst = enumerator.MoveNext();
        if (hasFirst) {
          return enumerator.Current();
        } else {
          return null;
        }
      };

      CollectionProxySealed.prototype.Last = function() {
        var enumerator, i, size;
        enumerator = this.GetEnumerator();
        size = this.Count();
        i = 0;
        while (i < size) {
          i += 1;
          enumerator.MoveNext();
        }
        return enumerator.Current();
      };

      CollectionProxySealed.prototype.Get = function(index) {
        var enumerator, i;
        if (exports.UTILS.IsNumber(index)) {
          enumerator = this.GetEnumerator();
          i = 0;
          while (i <= index) {
            i += 1;
            enumerator.MoveNext();
          }
          return enumerator.Current();
        } else {
          return null;
        }
      };

      CollectionProxySealed.prototype.Add = function(item) {
        if (this.__readOnly__) {
          throw "Operation not allowed for read only collection";
        }
        item = this.CheckValue(item);
        return this.__facade__.CollectionAdd(this.__instanceId__, this.genericArgumentTypeId, item, this.isScalar);
      };

      CollectionProxySealed.prototype.Clear = function() {
        if (this.__readOnly__) {
          throw "Operation not allowed for read only collection";
        }
        this.__facade__.CollectionClear(this.__instanceId__);
      };

      CollectionProxySealed.prototype.Contains = function(item) {
        item = this.CheckValue(item);
        return this.__facade__.CollectionContains(this.__instanceId__, item, this.isScalar, this.__readOnly__);
      };

      CollectionProxySealed.prototype.CopyTo = function(array, arrayIndex) {
        this.__facade__.CollectionCopyTo(this.genericArgumentTypeId, this.__instanceId__, this.isScalar, this.__readOnly__, array, arrayIndex);
      };

      CollectionProxySealed.prototype.Count = function() {
        return this.__facade__.CollectionCount(this.__instanceId__);
      };

      CollectionProxySealed.prototype.IsReadOnly = function() {
        return this.__readOnly__;
      };

      CollectionProxySealed.prototype.Remove = function(item) {
        if (this.__readOnly__) {
          throw "Operation not allowed for read only collection";
        }
        item = this.CheckValue(item);
        return this.__facade__.CollectionRemove(this.__instanceId__, item, this.isScalar);
      };

      CollectionProxySealed.prototype.GetEnumerator = function() {
        return this.__facade__.CollectionGetEnumerator(this.genericArgumentTypeId, this.__instanceId__, this.isScalar, this.__readOnly__);
      };

      CollectionProxySealed.prototype.TryFindPrimaryKey = function(key) {
        var rez;
        rez = this.__facade__.CollectionTryFindPrimaryKey(this.genericArgumentTypeId, this.__instanceId__, this.isScalar, this.IsReadOnly(), key);
        return rez.result;
      };

      CollectionProxySealed.prototype.FindByPrimaryKey = function(key) {
        return this.__facade__.CollectionFindByPrimaryKey(this.genericArgumentTypeId, this.__instanceId__, this.isScalar, this.IsReadOnly(), key);
      };

      CollectionProxySealed.prototype.ContainsPrimaryKey = function(key) {
        return this.__facade__.CollectionContainsPrimaryKey(this.__instanceId__, key, this.__readOnly__);
      };

      return CollectionProxySealed;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.DictionaryProxy = (function() {

      DictionaryProxy.VALUE = 'value';

      DictionaryProxy.KEY = 'key';

      function DictionaryProxy(__facade__, __instanceId__, __readOnly__, type) {
        this.__facade__ = __facade__;
        this.__instanceId__ = __instanceId__;
        this.__readOnly__ = __readOnly__;
        this.type = type;
        this.elementTypeId = exports.StaticProxyFacade.get().GetTypeId(this.type);
        this.isScalar = exports.StaticProxyFacade.get().IsScalarType(this.elementTypeId);
        if (this.type.genericArguments[0] !== null) {
          this.keyIsScalar = this.type.genericArguments[0].isScalar;
        } else {
          this.keyIsScalar = false;
        }
      }

      DictionaryProxy.prototype.First = function() {
        var enumerator, hasFirst;
        enumerator = this.GetEnumerator();
        hasFirst = enumerator.MoveNext();
        if (hasFirst) {
          return enumerator.Current();
        } else {
          return null;
        }
      };

      DictionaryProxy.prototype.Last = function() {
        var enumerator, i, size;
        enumerator = this.GetEnumerator();
        size = this.Count();
        i = 0;
        while (i < size) {
          i += 1;
          enumerator.MoveNext();
        }
        return enumerator.Current();
      };

      DictionaryProxy.prototype.Add = function(key, value) {
        var newKey, newValue;
        newKey = null;
        newValue = null;
        if (this.__readOnly__) {
          throw "Operation not allowed for read only dictionary";
        }
        if (!(value != null) && key.hasOwnProperty(DictionaryProxy.KEY) && key.hasOwnProperty(DictionaryProxy.VALUE)) {
          value = key[DictionaryProxy.VALUE];
          key = key[DictionaryProxy.KEY];
        }
        newKey = this.CheckKey(key);
        newValue = this.CheckValue(value);
        this.__facade__.DictionaryAdd(this.__instanceId__, exports.Guid.EMPTY, this.isScalar, newKey, newValue);
      };

      /*
            This method is checking if key is scalara if it is of right type, and
            if it is not try to make it of right type. Also checking if proxy is
            proxy for rigth type. Return valid key.
      */


      DictionaryProxy.prototype.CheckKey = function(key) {
        var keyType, newKey;
        keyType = this.type.genericArguments[0];
        if (keyType.isScalar) {
          if (exports.UTILS.IsInstaceOfScalar(key, keyType)) {
            newKey = key;
          } else {
            newKey = exports.IOGType.CreateScalar(keyType, key);
          }
        } else {
          newKey = key;
        }
        return newKey;
      };

      /*
            This method is checking if key is scalara if it is of right type, and
            if it is not try to make it of right type. Also checking if proxy is
            proxy for rigth type. Return valid value.
      */


      DictionaryProxy.prototype.CheckValue = function(value) {
        var newValue;
        if (valueType.isScalar) {
          if (exports.UTILS.IsInstaceOfScalar(value, valueType)) {
            newValue = value;
          } else {
            newValue = exports.IOGType.CreateScalar(valueType, value);
          }
        } else {
          newValue = value;
        }
        return newValue;
      };

      DictionaryProxy.prototype.ContainsKey = function(key) {
        var newKey;
        newKey = this.CheckKey(key);
        return this.__facade__.DictionaryContainsKey(this.__instanceId__, newKey, this.__readOnly__);
      };

      DictionaryProxy.prototype.Keys = function() {
        return this.__facade__.DictionaryKeys(this.__instanceId__, this.__readOnly__);
      };

      DictionaryProxy.prototype.Remove = function(key) {
        var newKey;
        if (__readOnly__) {
          throw "Operation not allowed for read only dictionary";
        }
        newKey = this.CheckKey(key);
        return this.__facade__.DictionaryRemove(this.__instanceId__, newKey);
      };

      DictionaryProxy.prototype.TryGetValue = function(key) {
        var newKey, result, returnValue, valueType;
        newKey = this.CheckKey(key);
        valueType = this.type.genericArguments[1];
        returnValue = this.__facade__.DictionaryTryGetValue(this.__instanceId__, exports.StaticProxyFacade.get().GetTypeId(this.type.genericArguments[1]), this.isScalar, this.__readOnly__, newKey);
        if (valueType.isScalar) {
          result = {};
          result[DictionaryProxySealed.RESULT] = returnValue.result;
          result[DictionaryProxySealed.VALUE] = returnValue.value.value;
          return result;
        } else {
          return returnValue;
        }
      };

      DictionaryProxy.prototype.Values = function() {
        return this.__facade__.DictionaryValues(this.__instanceId__, exports.StaticProxyFacade.get().GetTypeId(this.type.genericArguments[1]), this.isScalar, this.__readOnly__);
      };

      DictionaryProxy.prototype.Get = function(key) {
        var newKey, returnValue, valueType;
        newKey = this.CheckKey(key);
        valueType = this.type.genericArguments[1];
        returnValue = this.__facade__.DictionaryGetValue(this.__instanceId__, exports.StaticProxyFacade.get().GetTypeId(this.type.genericArguments[1]), this.isScalar, this.__readOnly__, newKey);
        if (valueType.isScalar) {
          return returnValue.value;
        } else {
          return returnValue;
        }
      };

      DictionaryProxy.prototype.Set = function(key, value) {
        var newKey, newValue;
        if (this.__readOnly__) {
          throw "Operation not allowed for read only dictionary";
        }
        newKey = this.CheckKey(key);
        newValue = this.CheckValue(value);
        return this.__facade__.DictionarySetValue(this.__instanceId__, exports.StaticProxyFacade.get().GetTypeId(this.type.genericArguments[1]), this.isScalar, this.__readOnly__, newKey, newValue);
      };

      DictionaryProxy.prototype.Clear = function() {
        if (__readOnly__) {
          throw "Operation not allowed for read only dictionary";
        }
        this.__facade__.DictionaryClear(this.__instanceId__);
      };

      DictionaryProxy.prototype.Contains = function(item) {
        return this.__facade__.DictionaryContains(this.__instanceId__, item, this.__readOnly__);
      };

      DictionaryProxy.prototype.CopyTo = function(array, arrayIndex) {
        this.__facade__.DictionaryCopyTo(this.__instanceId__, exports.StaticProxyFacade.get().GetTypeId(this.type.genericArguments[1]), this.isScalar, this.__readOnly__, array, arrayIndex);
      };

      DictionaryProxy.prototype.Count = function() {
        return this.__facade__.DictionaryCount(this.__instanceId__, this.__readOnly__);
      };

      DictionaryProxy.prototype.IsReadOnly = function() {
        return this.__readOnly__;
      };

      DictionaryProxy.prototype.Remove = function(item) {
        if (this.__readOnly__) {
          throw "Operation not allowed for read only dictionary";
        }
        return this.__facade__.DictionaryRemove(this.__instanceId__, item);
      };

      DictionaryProxy.prototype.GetEnumerator = function() {
        return this.__facade__.DictionaryGetEnumerator(this.__instanceId__, exports.StaticProxyFacade.get().GetTypeId(this.type.genericArguments[1]), this.isScalar, this.readOnly, this.keyIsScalar);
      };

      return DictionaryProxy;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.DictionaryProxySealed = (function() {

      DictionaryProxySealed.KEY = 'key';

      DictionaryProxySealed.VALUE = 'value';

      DictionaryProxySealed.RESULT = 'result';

      function DictionaryProxySealed(__facade__, __instanceId__, __readOnly__, type) {
        this.__facade__ = __facade__;
        this.__instanceId__ = __instanceId__;
        this.__readOnly__ = __readOnly__;
        this.type = type;
        this.elementTypeId = exports.StaticProxyFacade.get().GetTypeId(this.type);
        this.isScalar = exports.StaticProxyFacade.get().IsScalarType(this.elementTypeId);
        if (this.type.genericArguments[0] !== null) {
          this.keyIsScalar = this.type.genericArguments[0].isScalar;
        } else {
          this.keyIsScalar = false;
        }
      }

      DictionaryProxySealed.prototype.First = function() {
        var enumerator, hasFirst;
        enumerator = this.GetEnumerator();
        hasFirst = enumerator.MoveNext();
        if (hasFirst) {
          return enumerator.Current();
        } else {
          return null;
        }
      };

      DictionaryProxySealed.prototype.Last = function() {
        var enumerator, i, size;
        enumerator = this.GetEnumerator();
        size = this.Count();
        i = 0;
        while (i < size) {
          i += 1;
          enumerator.MoveNext();
        }
        return enumerator.Current();
      };

      /*
            This method is checking if key is scalara if it is of right type, and
            if it is not try to make it of right type. Also checking if proxy is
            proxy for rigth type. Return valid key.
      */


      DictionaryProxySealed.prototype.CheckKey = function(key) {
        var keyType, newKey;
        keyType = this.type.genericArguments[0];
        if (keyType.isScalar) {
          if (exports.UTILS.IsInstaceOfScalar(key, keyType)) {
            newKey = key;
          } else {
            newKey = exports.IOGType.CreateScalar(keyType, key);
          }
        } else {
          newKey = key;
        }
        return newKey;
      };

      /*
            This method is checking if key is scalara if it is of right type, and
            if it is not try to make it of right type. Also checking if proxy is
            proxy for rigth type. Return valid value.
      */


      DictionaryProxySealed.prototype.CheckValue = function(value) {
        var newValue, valueType;
        valueType = this.type.genericArguments[1];
        if (valueType.isScalar) {
          if (exports.UTILS.IsInstaceOfScalar(value, valueType)) {
            newValue = value;
          } else {
            newValue = exports.IOGType.CreateScalar(valueType, value);
          }
        } else {
          newValue = value;
        }
        return newValue;
      };

      DictionaryProxySealed.prototype.Add = function(key, value) {
        var newKey, newValue;
        newKey = null;
        newValue = null;
        if (this.__readOnly__) {
          throw "Operation not allowed for read only dictionary";
        }
        if (!(value != null) && key.hasOwnProperty(DictionaryProxySealed.KEY) && key.hasOwnProperty(DictionaryProxySealed.VALUE)) {
          value = key[DictionaryProxy.VALUE];
          key = key[DictionaryProxy.KEY];
        }
        newKey = this.CheckKey(key);
        newValue = this.CheckValue(value);
        this.__facade__.DictionaryAdd(this.__instanceId__, exports.StaticProxyFacade.get().GetTypeId(this.type.genericArguments[1]), this.isScalar, newKey, newValue);
      };

      DictionaryProxySealed.prototype.ContainsKey = function(key) {
        var newKey;
        newKey = this.CheckKey(key);
        return this.__facade__.DictionaryContainsKey(this.__instanceId__, newKey, this.__readOnly__);
      };

      DictionaryProxySealed.prototype.Keys = function() {
        return this.__facade__.DictionaryKeys(this.__instanceId__, this.__readOnly__);
      };

      DictionaryProxySealed.prototype.Remove = function(key) {
        var newKey;
        if (__readOnly__) {
          throw "Operation not allowed for read only dictionary";
        }
        newKey = this.CheckKey(key);
        return this.__facade__.DictionaryRemove(this.__instanceId__, newKey);
      };

      DictionaryProxySealed.prototype.TryGetValue = function(key) {
        var newKey, result, returnValue, valueType;
        newKey = this.CheckKey(key);
        valueType = this.type.genericArguments[1];
        returnValue = this.__facade__.DictionaryTryGetValue(this.__instanceId__, exports.StaticProxyFacade.get().GetTypeId(this.type.genericArguments[1]), this.isScalar, this.__readOnly__, newKey);
        if (valueType.isScalar) {
          result = {};
          result[DictionaryProxySealed.RESULT] = returnValue.result;
          result[DictionaryProxySealed.VALUE] = returnValue.value.value;
          return result;
        } else {
          return returnValue;
        }
      };

      DictionaryProxySealed.prototype.Values = function() {
        return this.__facade__.DictionaryValues(this.__instanceId__, exports.StaticProxyFacade.get().GetTypeId(this.type.genericArguments[1]), this.isScalar, this.__readOnly__);
      };

      DictionaryProxySealed.prototype.Get = function(key) {
        var newKey, returnValue, valueType;
        newKey = this.CheckKey(key);
        valueType = this.type.genericArguments[1];
        returnValue = this.__facade__.DictionaryGetValue(this.__instanceId__, exports.StaticProxyFacade.get().GetTypeId(this.type.genericArguments[1]), this.isScalar, this.__readOnly__, newKey);
        if (valueType.isScalar) {
          return returnValue.value;
        } else {
          return returnValue;
        }
      };

      DictionaryProxySealed.prototype.Set = function(key, value) {
        var newKey, newValue;
        if (this.__readOnly__) {
          throw "Operation not allowed for read only dictionary";
        }
        newKey = this.CheckKey(key);
        newValue = this.CheckValue(value);
        return this.__facade__.DictionarySetValue(this.__instanceId__, exports.StaticProxyFacade.get().GetTypeId(this.type.genericArguments[1]), this.isScalar, this.__readOnly__, newKey, newValue);
      };

      DictionaryProxySealed.prototype.Clear = function() {
        if (__readOnly__) {
          throw "Operation not allowed for read only dictionary";
        }
        this.__facade__.DictionaryClear(this.__instanceId__);
      };

      DictionaryProxySealed.prototype.Contains = function(item) {
        return this.__facade__.DictionaryContains(this.__instanceId__, item, this.__readOnly__);
      };

      DictionaryProxySealed.prototype.CopyTo = function(array, arrayIndex) {
        this.__facade__.DictionaryCopyTo(this.__instanceId__, exports.StaticProxyFacade.get().GetTypeId(this.type.genericArguments[1]), this.isScalar, this.__readOnly__, array, arrayIndex);
      };

      DictionaryProxySealed.prototype.Count = function() {
        return this.__facade__.DictionaryCount(this.__instanceId__, this.__readOnly__);
      };

      DictionaryProxySealed.prototype.IsReadOnly = function() {
        return this.__readOnly__;
      };

      DictionaryProxySealed.prototype.Remove = function(item) {
        if (this.__readOnly__) {
          throw "Operation not allowed for read only dictionary";
        }
        return this.__facade__.DictionaryRemove(this.__instanceId__, item);
      };

      DictionaryProxySealed.prototype.GetEnumerator = function() {
        return this.__facade__.DictionaryGetEnumerator(this.__instanceId__, exports.StaticProxyFacade.get().GetTypeId(this.type.genericArguments[1]), this.isScalar, this.__readOnly__, this.keyIsScalar);
      };

      return DictionaryProxySealed;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.FieldBuilder = (function() {

      function FieldBuilder(fieldName, fieldType) {
        this.fieldName = fieldName;
        this.fieldType = fieldType;
      }

      return FieldBuilder;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    exports.ProxyBuilder = (function() {

      ProxyBuilder.IOG_TYPE = "iogType";

      function ProxyBuilder() {}

      ProxyBuilder.GenerateClass = function(classname) {
        return (function() {

          function _Class(__facade__, __instanceId__, __readOnly__) {
            this.__facade__ = __facade__;
            this.__instanceId__ = __instanceId__;
            this.__readOnly__ = __readOnly__;
          }

          return _Class;

        })();
      };

      ProxyBuilder.Generate = function(className, properties, type) {
        var C;
        C = this.GenerateClass(className);
        C.prototype["Equals"] = function() {
          return exports.StaticProxyFacade.get().AreEqual(this, obj);
        };
        C.prototype["GetHashCode"] = function() {
          return exports.StaticProxyFacade.get().GetProxyHashCode(this);
        };
        C.primaryKeyMemberId = null;
        C.propertyIdName = null;
        C.propertyIsScalarName = null;
        C.typeId = null;
        C.type = type;
        C["GetBuilder"] = function(proxy, propID, propScalar, propType) {
          var memberId, scalar;
          memberId = propID;
          scalar = propScalar;
          if (scalar === false) {
            return function() {
              var newCollection, newDictionary, value;
              value = this.__facade__.GetInstanceMemberValue(this.__instanceId__, new exports.Guid(memberId), scalar, this.__readOnly__);
              if ((value != null)) {
                return value;
              }
              if (value === null && (exports.UTILS.IsCollectionType(propType))) {
                newCollection = this.__facade__.CreateCollection(propType);
                this.__facade__.SetInstanceMemberValue(this.__instanceId__, new exports.Guid(memberId), newCollection, scalar, this.__readOnly__);
                return newCollection;
              }
              if (value === null && (exports.UTILS.IsDictionaryType(propType))) {
                newDictionary = this.__facade__.CreateDictionary(propType);
                this.__facade__.SetInstanceMemberValue(this.__instanceId__, new exports.Guid(memberId), newDictionary, scalar, this.__readOnly__);
                return newDictionary;
              }
              return value;
            };
          } else {
            if (exports.UTILS.equals(propType, exports.DateTimeType) || exports.UTILS.equals(propType, exports.TimeSpanType)) {
              return function() {
                return this.__facade__.GetInstanceMemberValue(this.__instanceId__, new exports.Guid(memberId), scalar, this.__readOnly__);
              };
            } else {
              return function() {
                var value;
                value = this.__facade__.GetInstanceMemberValue(this.__instanceId__, new exports.Guid(memberId), scalar, this.__readOnly__);
                if (value === null) {
                  return null;
                } else {
                  return value.value;
                }
              };
            }
          }
        };
        C["SetBuilder"] = function(proxy, propID, propScalar, propType) {
          var memberId, scalar;
          memberId = propID;
          scalar = propScalar;
          if (scalar === true) {
            return function(value) {
              return this.__facade__.SetInstanceMemberValue(this.__instanceId__, new exports.Guid(memberId), exports.IOGType.CreateScalar(exports.UTILS.GetType(propType.name), value), scalar, this.__readOnly__);
            };
          } else {
            return function(value) {
              return this.__facade__.SetInstanceMemberValue(this.__instanceId__, new exports.Guid(memberId), value, scalar, this.__readOnly__);
            };
          }
        };
        C["Initializer"] = function() {
          var prop, propMemberIdSufix, propMemberIsScalarSufix, propType, proxyFacade, _i, _len;
          C.typeId = type.id;
          proxyFacade = exports.StaticProxyFacade.get();
          C.typeId = proxyFacade.typesService.GetTypeId(C.type);
          C.primaryKeyMemberId = proxyFacade.GetTypePrimaryKeyMemberId(C.typeId);
          for (_i = 0, _len = properties.length; _i < _len; _i++) {
            prop = properties[_i];
            if (exports.ProxyBuilder.IsRevisionIdProperty(prop)) {
              throw "Not implemented!";
            } else {
              if (exports.ProxyBuilder.IsDataProperty(prop)) {
                C[prop.name + exports.Constants.PropertyMemberIdSufix] = proxyFacade.GetTypeMemberId(C.typeId, new exports.IOGString(prop.name));
                C[prop.name + exports.Constants.PropertyIsScalarSufix] = proxyFacade.IsScalarMember(C[prop.name + exports.Constants.PropertyMemberIdSufix]);
                propMemberIdSufix = C[prop.name + exports.Constants.PropertyMemberIdSufix].value;
                propMemberIsScalarSufix = C[prop.name + exports.Constants.PropertyIsScalarSufix];
                propType = prop.GetPropertyType();
                C.prototype["Get" + prop.name] = C.GetBuilder(C, propMemberIdSufix, propMemberIsScalarSufix, propType);
                C.prototype["Set" + prop.name] = C.SetBuilder(C, propMemberIdSufix, propMemberIsScalarSufix, propType);
              }
            }
          }
          C.prototype["equals"] = function(object) {
            return exports.StaticProxyFacade.get().AreEqual(this, obj);
          };
          return C.prototype["GetHashCode"] = function() {
            return exports.StaticProxyFacade.get().GetProxyHashCode(this);
          };
        };
        return C;
      };

      ProxyBuilder.IsRevisionIdProperty = function(propertyInfo) {
        return propertyInfo.canRead && !propertyInfo.canWrite && propertyInfo.GetCustomAttributes("RevisionIdAttribute") && exports.UTILS.equals(propertyInfo.GetPropertyType(), exports.GuidType);
      };

      ProxyBuilder.IsDataProperty = function(propertyInfo) {
        return propertyInfo.canRead && propertyInfo.canWrite;
      };

      return ProxyBuilder;

    })();
    return exports.TypeBuilder = (function() {

      function TypeBuilder() {}

      TypeBuilder.DefineType = function(typeName) {
        return new exports.Type(exports.Guid.Create(), typeName, false, false, false, false, false, null, []);
      };

      return TypeBuilder;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.GenerationService = (function() {

      function GenerationService(typesService) {
        this.typesService = typesService;
      }

      GenerationService.AddEqualsHashcode = function(tb) {};

      GenerationService.GenerateDataProperty = function(tb, property, propertyName, fbinstaceId, fbTypeId, fbReadOnly, fbFacade) {
        throw "Changed implementation";
      };

      GenerationService.GenerateRevisionIdProperty = function(tb, property, fbinstaceId) {
        throw "Changed implementation";
      };

      GenerationService.prototype.GenerateProxyType = function(type) {
        var assemblyFileName, collectionType, dictionaryType, newType, properties, saveAssemblyToDisk, typeId;
        saveAssemblyToDisk = false;
        assemblyFileName = "a";
        dictionaryType = null;
        if (((dictionaryType = exports.UTILS.IsDictionaryType(type)) != null)) {
          return this.GenerateDictionaryProxyType(type);
        }
        collectionType = null;
        if (((collectionType = exports.UTILS.IsCollectionType(type)) != null)) {
          return this.GenerateCollectionProxyType(type);
        }
        if (!type.isInterface) {
          throw "Type should be an interface:" + type.name;
        }
        typeId = this.typesService.GetTypeId(type);
        if (exports.UTILS.equals(typeId, exports.Guid.EMPTY)) {
          throw "Type not registered:" + type.name;
        }
        properties = [];
        exports.UTILS.ExtractProperties(type, properties);
        newType = exports.ProxyBuilder.Generate(type.name + exports.Constants.ProxyTypeSufix, properties, type);
        return newType;
      };

      GenerationService.prototype.IsRevisionIdProperty = function(propertyInfo) {
        return propertyInfo.canRead && !propertyInfo.canWrite && propertyInfo.GetCustomAttributes(RevisionIdAttribute) && exports.UTILS.equals(propertyInfo.GetPropertyType(), exports.GuidType);
      };

      GenerationService.prototype.IsDataProperty = function(propertyInfo) {
        return propertyInfo.canRead && propertyInfo.canWrite;
      };

      GenerationService.prototype.GenerateCollectionProxyType = function(collectionType) {
        var baseListType, elementType, inter, isOrdered, isSet, _i, _len, _ref;
        elementType = collectionType.genericArguments;
        baseListType = null;
        isSet = false;
        isOrdered = false;
        _ref = collectionType.interfaces;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          inter = _ref[_i];
          if (inter === "IScalarSet") {
            isSet = true;
          }
          if (inter === "IOrderedCollection") {
            isOrdered = true;
          }
        }
        if (!this.typesService.IsSealedType(elementType)) {
          if (!isSet) {
            if (isOrdered) {
              throw "Not yet supported";
            } else {
              baseListType = exports.CollectionProxy;
            }
          } else {
            throw "Not yet supported";
          }
        } else {
          if (!isSet) {
            if (isOrdered) {
              throw "Not yet supported";
            } else {
              baseListType = exports.CollectionProxySealed;
            }
          } else {
            throw "Not yet supported";
          }
        }
        return baseListType;
      };

      GenerationService.prototype.GenerateDictionaryProxyType = function(dictionaryType) {
        var baseDictionaryType, elementType;
        elementType = dictionaryType.genericType;
        if (!this.typesService.IsSealedType(elementType[0])) {
          baseDictionaryType = exports.DictionaryProxy;
        } else {
          baseDictionaryType = exports.DictionaryProxySealed;
        }
        return baseDictionaryType;
      };

      GenerationService.prototype.GenerateProxyTypes = function(types) {
        var assemblyFileName, generatedType, mapping, saveAssemblyToDisk, type, _i, _len;
        saveAssemblyToDisk = false;
        assemblyFileName = "a";
        mapping = new exports.Dictionary();
        for (_i = 0, _len = types.length; _i < _len; _i++) {
          type = types[_i];
          if (type.isInterface) {
            generatedType = this.GenerateProxyType(type);
            mapping.Add(type, generatedType);
          }
        }
        return mapping;
      };

      return GenerationService;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.AutoOverrideMergeRuleProvider = (function() {

      function AutoOverrideMergeRuleProvider() {}

      AutoOverrideMergeRuleProvider.prototype.IsConcurrent = function(typeId) {
        return true;
      };

      AutoOverrideMergeRuleProvider.prototype.IsMemberOverride = function(typeId, memberId) {
        return true;
      };

      AutoOverrideMergeRuleProvider.prototype.IsStaticConcurrency = function(typeId) {
        return true;
      };

      return AutoOverrideMergeRuleProvider;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    var WorkspaceStateElement;
    exports.TrackingWorkspaceStateProvider = (function() {

      function TrackingWorkspaceStateProvider(workspaceStates) {
        this.workspaceStates = workspaceStates != null ? workspaceStates : new exports.Dictionary();
      }

      TrackingWorkspaceStateProvider.prototype.AddWorkspace = function(workspaceId, snapshotId, isolationLevel, timeout) {
        return this.workspaceStates.Add(workspaceId, new exports.WorkspaceStateElement(snapshotId, isolationLevel, DateTime.utcNow, timeout));
      };

      TrackingWorkspaceStateProvider.prototype.IsWorkspaceExpired = function(workspaceId) {
        return !this.workspaceStates.Contains(workspaceId) || this.workspaceStates[workspaceId].IsExpired();
      };

      TrackingWorkspaceStateProvider.prototype.GetWorkspaceSnapshotId = function(workspaceId) {
        return this.workspaceStates[workspaceId].snapshotId;
      };

      TrackingWorkspaceStateProvider.prototype.RemoveWorkspace = function(workspaceId) {
        var level;
        level = exports.IsolationLevel.ReadOnly;
        level = this.workspaceStates.Get(workspaceId).isolationLevel;
        return this.workspaceStates.Remove(workspaceId);
      };

      TrackingWorkspaceStateProvider.prototype.Cleanup = function() {
        var expiredWorkspaces, item, key, _i, _j, _len, _len1, _ref, _results;
        expiredWorkspaces = [];
        _ref = this.workspaceStates.Keys();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          item = this.workspaceStates.Get(key);
          if (item.IsExpired()) {
            expiredWorkspaces.push(key);
          }
        }
        _results = [];
        for (_j = 0, _len1 = expiredWorkspaces.length; _j < _len1; _j++) {
          key = expiredWorkspaces[_j];
          _results.push(this.RemoveWorkspace(key));
        }
        return _results;
      };

      TrackingWorkspaceStateProvider.prototype.UsedSnapshotIds = function() {
        var item, key, res, _i, _len, _ref;
        res = [];
        _ref = this.workspaceStates.Keys();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          item = this.workspaceStates.Get(key);
          if (item.IsExpired()) {
            res.push(item.snapshotId);
          }
        }
        return res;
      };

      TrackingWorkspaceStateProvider.prototype.UpdateWorspace = function(workspaceId, snapshotId) {
        this.workspaceStates[workspaceId].lastAccessDateTime = DateTime.utcNow;
        return this.workspaceStates[workspaceId].snapshotId = snapshotId;
      };

      return TrackingWorkspaceStateProvider;

    })();
    return WorkspaceStateElement = (function() {

      function WorkspaceStateElement(snapshotId, isolationLevel, lastAccessDateTime, timeout) {
        this.snapshotId = snapshotId;
        this.isolationLevel = isolationLevel;
        this.lastAccessDateTime = lastAccessDateTime;
        this.timeout = timeout;
      }

      WorkspaceStateElement.prototype.IsExpired = function() {
        return (this.lastAccessDateTime.Add(Timeout))._millis < DateTime.utcNow.span._millis;
      };

      return WorkspaceStateElement;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.AppendableChangeSet = (function() {

      function AppendableChangeSet(sourceSnapshotId, destinationSnapshotId, nodes, mapping, nodeStates, reusedNodes) {
        this.sourceSnapshotId = sourceSnapshotId;
        this.destinationSnapshotId = destinationSnapshotId;
        this.nodes = nodes;
        this.mapping = mapping;
        this.nodeStates = nodeStates;
        this.reusedNodes = reusedNodes;
      }

      return AppendableChangeSet;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.IsolatedChangeSet = (function() {

      function IsolatedChangeSet(sourceSnapshotId, nodes, nodeStates) {
        this.sourceSnapshotId = sourceSnapshotId;
        this.nodes = nodes != null ? nodes : new exports.DirectNodeProvider();
        this.nodeStates = nodeStates != null ? nodeStates : new exports.Dictionary();
      }

      return IsolatedChangeSet;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.IsolatedNodeProvider = (function() {

      function IsolatedNodeProvider(parentProvider, isolatedProvider) {
        this.parentProvider = parentProvider;
        this.isolatedProvider = isolatedProvider;
        this.nodeStates = new exports.Dictionary();
      }

      IsolatedNodeProvider.prototype.SetNode = function(identifier, node) {
        this.isolatedProvider.SetNode(identifier, node);
        if (!this.nodeStates.Contains(identifier)) {
          return this.nodeStates.Add(identifier, exports.NodeState.Created);
        }
      };

      IsolatedNodeProvider.prototype.GetNode = function(nodeId, access) {
        if (access === exports.NodeAccess.ReadWrite) {
          this.EnsureNode(nodeId);
          return this.isolatedProvider.GetNode(nodeId, access);
        } else {
          if (this.isolatedProvider.Contains(nodeId)) {
            return this.isolatedProvider.GetNode(nodeId, access);
          } else {
            return this.parentProvider.GetNode(nodeId, access);
          }
        }
      };

      IsolatedNodeProvider.prototype.Contains = function(identifier) {
        return this.isolatedProvider.Contains(identifier) || this.parentProvider.Contains(identifier);
      };

      IsolatedNodeProvider.prototype.Remove = function(identifier) {
        this.EnsureNode(identifier);
        return this.nodeStates.Set(identifier, NodeState.Removed);
      };

      IsolatedNodeProvider.prototype.EnumerateNodes = function() {
        return this.parentProvider.EnumerateNodes();
      };

      IsolatedNodeProvider.prototype.GetChanges = function(snapshotId) {
        return new exports.IsolatedChangeSet(snapshotId, this.isolatedProvider, this.nodeStates);
      };

      IsolatedNodeProvider.prototype.EnumerateChanges = function() {
        return this.isolatedProvider.EnumerateNodes();
      };

      IsolatedNodeProvider.prototype.GetNodeState = function(identifier) {
        if (this.nodeStates.Contains(identifier)) {
          return this.nodeStates.Get(identifier);
        } else {
          return exports.NodeState.None;
        }
      };

      IsolatedNodeProvider.prototype.Clear = function() {
        this.isolatedProvider.Clear();
        return this.nodeStates.Clear();
      };

      IsolatedNodeProvider.prototype.EnsureNode = function(nodeId) {
        var edge, edgeList, key, newNode, node, value, valueList, _i, _j, _len, _len1, _ref, _ref1;
        if (!this.isolatedProvider.Contains(nodeId)) {
          node = this.parentProvider.GetNode(nodeId, exports.NodeAccess.Read);
          edgeList = new exports.Dictionary();
          _ref = node.edges.Keys();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            key = _ref[_i];
            edge = node.edges.Get(key);
            edgeList.Add(edge.data, new exports.Edge(edge.toNodeId, new exports.EdgeData(edge.data.semantic, edge.data.data, edge.data.flags)));
          }
          valueList = new exports.Dictionary();
          _ref1 = node.values.Keys();
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            key = _ref1[_j];
            value = node.values.Get(key);
            valueList.Add(key, value);
          }
          newNode = new exports.Node(node.nodeType, node.data, edgeList, valueList);
          newNode.commited = false;
          this.isolatedProvider.SetNode(nodeId, newNode);
          return this.nodeStates.Add(nodeId, exports.NodeState.Modified);
        }
      };

      return IsolatedNodeProvider;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.RecursiveResolutionParameters = (function() {

      function RecursiveResolutionParameters(subTree, destinationProvider, sourceProvider, changeSet, intermediateChanges, visitedNodes) {
        this.subTree = subTree;
        this.destinationProvider = destinationProvider;
        this.sourceProvider = sourceProvider;
        this.changeSet = changeSet;
        this.intermediateChanges = intermediateChanges;
        this.visitedNodes = visitedNodes;
      }

      return RecursiveResolutionParameters;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.CommitResult = (function() {

      function CommitResult(resultSnapshotId, mapping) {
        this.resultSnapshotId = resultSnapshotId;
        this.mapping = mapping;
      }

      return CommitResult;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    exports.events = $({});
    return exports.ServerContext = (function() {

      ServerContext.TYPE = "Type";

      ServerContext.IOG_TYPE = "iogType";

      ServerContext.NODE = 'node';

      ServerContext.IDENTIFIER = 'identifier';

      ServerContext.RESULT = "result";

      ServerContext.R20 = /%20/g;

      ServerContext.COMMITED = "Commited";

      ServerContext.NODE_TYPE = "NodeType";

      ServerContext.VALUES = "Values";

      ServerContext.EDGES = "Edges";

      ServerContext.DATA = "Data";

      ServerContext.PREVIOUS = "Previous";

      ServerContext.KEY = "Key";

      ServerContext.VALUE = "Value";

      ServerContext.SEMANTIC = "Semantic";

      ServerContext.FLAGS = "Flags";

      ServerContext.TYPE_NAME = "TypeName";

      ServerContext.TO_NODE_ID = "ToNodeId";

      ServerContext.NODE_ID = "nodeId";

      ServerContext.ACCESS = "access";

      ServerContext.WORKSPACE_ID = "workspaceId";

      ServerContext.SNAPSHOT_ID = "snapshotId";

      ServerContext.ISOLATION_LEVEL = "isolationLevel";

      ServerContext.TIMEOUT = "timeout";

      ServerContext.SNAPSHOT_ID = "snapshotId";

      ServerContext.OLD_SNAPSHOT_ID = "oldSnapshotId";

      ServerContext.NEW_SNAPSHOT_ID = "newSnapshotId";

      ServerContext.WORKSPACE_ID = "workspaceId";

      ServerContext.SNAPSHOT_ID = "snapshotId";

      ServerContext.CHANGE_SET = "changeSet";

      ServerContext.RESULT_SNAPSHOT_ID = "ResultSnapshotId";

      ServerContext.MAPPING = "Mapping";

      ServerContext.NAME_OF_TYPE = "NameOfType";

      ServerContext.GENERIC_ARGUMENTS_TYPE_NAME = "GenericAgrumentsTypeName";

      function ServerContext(hostname, serviceName) {
        var eventsHub;
        this.hostname = hostname;
        this.serviceName = serviceName;
        if ((this.hostname != null)) {
          this.urlForService = "http://" + this.hostname + "/" + this.serviceName + "/";
        } else {
          this.urlForService = "" + this.serviceName + "/";
        }
        eventsHub = $.connection.eventsHub;
      }

      ServerContext.ProcessDataForSending = function(data) {
        return JSON.stringify(data);
      };

      ServerContext.prototype.ServiceCall = function(functionName, dataForSending, handler) {
        return $.ajax({
          type: "POST",
          contentType: "application/json; charset=utf-8",
          url: this.urlForService + functionName,
          data: dataForSending != null ? ServerContext.ProcessDataForSending(dataForSending) : "{}",
          async: false,
          crossDomain: true,
          dataType: "json",
          success: function(msg) {
            return handler(msg);
          },
          error: function(e) {
            return alert('Error, this is not working!' + e.getAllResponseHeaders());
          }
        });
      };

      ServerContext.prototype.CreateSubscription = function(workspaceId, instanceId, propertyName, notifyChangesFromSameWorkspace, callback) {
        var msg, rez;
        msg = {};
        msg.workspaceId = workspaceId.value;
        msg.instanceId = instanceId.value;
        msg.propertyName = propertyName;
        msg.notifyChangesFromSameWorkspace = notifyChangesFromSameWorkspace;
        msg.callerId = $.connection.hub.id;
        rez = null;
        this.ServiceCall("CreateSubscription", msg, function(msg) {
          var resultJson, subscription, subscriptionId, subscriptionObj, temp;
          temp = msg.d;
          resultJson = JSON.parse(temp);
          subscriptionObj = resultJson[ServerContext.RESULT];
          subscriptionId = new exports.Guid(subscriptionObj.SubscriptionId);
          workspaceId = new exports.Guid(subscriptionObj.WorkspaceId);
          subscription = new exports.Subscription(subscriptionId, workspaceId);
          exports.events.bind(subscriptionId.value, function(args) {
            console.log("Event happend");
            return callback(args);
          });
          return rez = subscription;
        });
        return rez;
      };

      ServerContext.prototype.RemoveSubscription = function(subscriptionId, workspaceId) {
        var msg;
        msg = {};
        msg.subscriptionId = subscriptionId;
        msg.workspaceId = workspaceId;
        msg.callerId = $.connection.hub.id;
        return this.ServiceCall("RemoveSubscription", msg, function(msg) {});
      };

      ServerContext.prototype.LastSnapshotId = function() {
        var rez;
        rez = null;
        this.ServiceCall("LastSnapshotId", null, function(msg) {
          var resultJson, temp;
          temp = msg.d;
          resultJson = JSON.parse(temp);
          return rez = new exports.Guid(resultJson[ServerContext.RESULT]);
        });
        return rez;
      };

      ServerContext.prototype.EnterExclusiveLock = function() {
        return this.ServiceCall("EnterExclusiveLock", null, function(msg) {});
      };

      ServerContext.prototype.EnterSharedLock = function() {
        return this.ServiceCall("EnterSharedLock", null, function(msg) {});
      };

      ServerContext.prototype.SnapshotIsolationEnabled = function() {
        var tempSnapshotIsolationEnabled;
        tempSnapshotIsolationEnabled = null;
        this.ServiceCall("SnapshotIsolationEnabled", null, function(msg) {
          var temp;
          temp = msg.d;
          return tempSnapshotIsolationEnabled = JSON.parse(temp)[ServerContext.RESULT];
        });
        return tempSnapshotIsolationEnabled;
      };

      ServerContext.prototype.DefaultWorkspaceTimeout = function() {
        var tempDefaultWorkspaceTimeout;
        tempDefaultWorkspaceTimeout = null;
        this.ServiceCall("DefaultWorkspaceTimeout", null, function(msg) {
          var temp, tempSpan;
          temp = msg.d;
          tempSpan = new TimeSpan();
          tempSpan._millis = JSON.parse(temp)[ServerContext.RESULT];
          tempSpan[ServerContext.IOG_TYPE] = exports.TimeSpanType;
          return tempDefaultWorkspaceTimeout = tempSpan;
        });
        return tempDefaultWorkspaceTimeout;
      };

      ServerContext.prototype.EntityTypes = function() {
        return this.ServiceCall("EntityTypes", null, function(msg) {
          var elem, genericType, newEnum, newType, temp, _i, _len;
          temp = msg.d;
          temp = JSON.parse(temp);
          for (_i = 0, _len = temp.length; _i < _len; _i++) {
            elem = temp[_i];
            newType = ServerContext.ExtractType(elem);
            exports.types.push(newType);
            genericType = newType;
            genericType.ClearGenericArguments();
            exports[newType.name + ServerContext.TYPE] = genericType;
            if (newType.isEnum) {
              newEnum = new exports.IOGEnum(newType);
              exports.enums[newEnum.name] = newEnum;
              if (!exports.typeToEnums.Contains(newType)) {
                exports.typeToEnums.Add(newType, newEnum);
              }
            }
            if (newType.isDictionaryType) {
              exports.DictionaryType = genericType;
            }
            if (newType.isCollectionType) {
              exports.ArrayType = genericType;
            }
            exports.IOGType.FindScalar(newType);
          }
          ServerContext.ReinitializeConstants();
        });
      };

      /*
          When library is initialized it made some Guid that don't have correct
          data for field iogType. Correct data for that field can be found
          only after first call of service EntityTypes. This method is used
          to fix that constats that are not in correct state at the begining.
      */


      ServerContext.ReinitializeConstants = function() {
        exports.EdgeDataSingleton.MAX_VALUE.data = new exports.Guid("53F11357-62B7-430F-B446-9EC8F9702406");
        exports.EdgeDataSingleton.MIN_VALUE.data = new exports.Guid("76367091-B69D-4BDF-A643-779032AF3503");
        exports.Constants.TypesNodeId = new exports.Guid("22DD35BD-071B-4429-837D-4F5D2C201580");
        exports.Constants.SnapshotsNodeId = new exports.Guid("52138911-0016-4C08-A685-9487617FD664");
        exports.Constants.ExclusiveWriterLockId = new exports.Guid("7EB5139E-72C2-4029-9EFD-1CD514775832");
        exports.Constants.NullReferenceNodeId = new exports.Guid("FFCE2840-A5D7-4C1F-81F4-A8AC7FC61F92");
        exports.Constants.TypeMemberPrimaryKeyId = new exports.Guid("67B21654-1E2D-4565-A4AE-33A7E1D43AF2");
        return exports.BPlusTreeOperations.InitFields();
      };

      ServerContext.prototype.OpenWorkspace = function(workspaceId, snapshotId, isolationLevel, timeout) {
        var objectForSending;
        objectForSending = {};
        objectForSending[ServerContext.WORKSPACE_ID] = workspaceId.value;
        if ((snapshotId != null) && snapshotId.hasOwnProperty('value')) {
          objectForSending[ServerContext.SNAPSHOT_ID] = snapshotId.value;
        } else {
          objectForSending[ServerContext.SNAPSHOT_ID] = snapshotId;
        }
        objectForSending[ServerContext.ISOLATION_LEVEL] = isolationLevel;
        objectForSending[ServerContext.TIMEOUT] = timeout._millis;
        return this.ServiceCall("OpenWorkspace", objectForSending, function(msg) {});
      };

      ServerContext.prototype.GetRootObjectId = function(snapshotId) {
        var objectForSending, rez;
        objectForSending = {};
        if ((snapshotId != null) && snapshotId.hasOwnProperty('value')) {
          objectForSending[ServerContext.SNAPSHOT_ID] = snapshotId.value;
        } else {
          objectForSending[ServerContext.SNAPSHOT_ID] = snapshotId;
        }
        rez = null;
        this.ServiceCall("GetRootObjectId", objectForSending, function(msg) {
          var temp;
          temp = msg.d;
          return rez = new exports.Guid(JSON.parse(temp)[ServerContext.RESULT]);
        });
        return rez;
      };

      ServerContext.prototype.EnumerateNodes = function() {
        var rez;
        rez = null;
        this.ServiceCall("EnumerateNodes", null, function(msg) {
          var newObj, temp;
          temp = msg.d;
          newObj = JSON.parse(temp)[ServerContext.RESULT];
          return rez = ServerContext.ExtractType(newObj);
        });
        return rez;
      };

      ServerContext.prototype.Clear = function() {
        return this.ServiceCall("Clear", null, function(msg) {
          return alert("Clear");
        });
      };

      ServerContext.prototype.GetRootType = function() {
        var rez;
        rez = null;
        this.ServiceCall("GetRootType", null, function(msg) {
          var newObj, temp;
          temp = msg.d;
          newObj = JSON.parse(temp)[ServerContext.RESULT];
          return rez = ServerContext.ExtractType(newObj);
        });
        if (exports.RootType === null) {
          exports.RootType = rez;
        }
        return rez;
      };

      ServerContext.prototype.Contains = function(identifier) {
        var objectForSending, rez;
        rez = null;
        objectForSending = {};
        objectForSending[ServerContext.IDENTIFIER] = identifier.value;
        this.ServiceCall("Contains", objectForSending, function(msg) {
          var temp;
          temp = msg.d;
          return rez = new exports.IOGBoolean(JSON.parse(temp)[ServerContext.RESULT]);
        });
        return rez;
      };

      ServerContext.prototype.GetNode = function(identifier, access) {
        var objectForSending, rez;
        rez = null;
        objectForSending = {};
        objectForSending[ServerContext.NODE_ID] = identifier.value;
        objectForSending[ServerContext.ACCESS] = access;
        this.ServiceCall("GetNode", objectForSending, function(msg) {
          var temp;
          temp = msg.d;
          return rez = ServerContext.NodeParser(JSON.parse(temp)[ServerContext.RESULT]);
        });
        return rez;
      };

      ServerContext.prototype.SetNode = function(identifier, node) {
        var objectForSending;
        objectForSending = {};
        objectForSending[ServerContext.IDENTIFIER] = identifier.value;
        objectForSending[ServerContext.NODE] = node;
        return this.ServiceCall("SetNode", objectForSending, function(msg) {});
      };

      ServerContext.prototype.ChangesBetween = function(oldSnapshotId, newSnapshotId) {
        var objectForSending, rez;
        rez = new exports.Dictionary();
        objectForSending = {};
        objectForSending[ServerContext.NEW_SNAPSHOT_ID] = newSnapshotId.value;
        objectForSending[ServerContext.OLD_SNAPSHOT_ID] = oldSnapshotId.value;
        this.ServiceCall("ChangesBetween", objectForSending, function(msg) {
          var key, temp, tempRez, value, _results;
          temp = msg.d;
          tempRez = JSON.parse(temp)[ServerContext.RESULT];
          _results = [];
          for (key in tempRez) {
            value = tempRez[key];
            _results.push(rez.Add(new exports.Guid(key), new exports.Guid(value)));
          }
          return _results;
        });
        return rez;
      };

      ServerContext.prototype.UpdateWorkspace = function(workspaceId, snapshotId) {
        var objectForSending;
        objectForSending = {};
        objectForSending[ServerContext.WORKSPACE_ID] = workspaceId.value;
        objectForSending[ServerContext.SNAPSHOT_ID] = snapshotId.value;
        return this.ServiceCall("UpdateWorkspace", objectForSending, function(msg) {});
      };

      ServerContext.prototype.CloseWorkspace = function(workspaceId) {
        var objectForSending;
        objectForSending = {};
        objectForSending[ServerContext.WORKSPACE_ID] = workspaceId.value;
        return this.ServiceCall("CloseWorkspace", objectForSending, function(msg) {});
      };

      ServerContext.prototype.Commit = function(workspaceId, changeSet) {
        var objectForSending, rez;
        objectForSending = {};
        objectForSending[ServerContext.WORKSPACE_ID] = workspaceId.value;
        objectForSending[ServerContext.CHANGE_SET] = changeSet;
        rez = null;
        this.ServiceCall("Commit", objectForSending, function(msg) {
          var commitResult, key, mapping, resultSnapshotId, temp, tempRez, value, _ref;
          temp = msg.d;
          tempRez = JSON.parse(temp)[ServerContext.RESULT];
          if (tempRez.hasOwnProperty(ServerContext.MAPPING) && tempRez.hasOwnProperty(ServerContext.RESULT_SNAPSHOT_ID)) {
            resultSnapshotId = new exports.Guid(tempRez[ServerContext.RESULT_SNAPSHOT_ID]);
            mapping = new exports.Dictionary();
            _ref = tempRez[ServerContext.MAPPING];
            for (key in _ref) {
              value = _ref[key];
              if (typeof value !== 'function') {
                mapping.Add(new exports.Guid(key), new exports.Guid(value));
              }
            }
            commitResult = new exports.CommitResult(resultSnapshotId, mapping);
            return rez = commitResult;
          }
        });
        return rez;
      };

      ServerContext.GetValue = function(object, property) {
        if (object.hasOwnProperty(property)) {
          return object[property];
        }
        return null;
      };

      ServerContext.ExtractGenericArguments = function(object) {
        var args, elem, rez, type, _i, _len;
        rez = [];
        args = this.GetValue(object, exports.TypeConstants.GenericArguments);
        if ((args != null)) {
          if (args.length === 0) {
            try {
              type = exports.IOGType.FindType(args.Name);
            } catch (error) {
              return rez;
            }
            if ((type != null)) {
              rez.push(type);
            }
          } else {
            for (_i = 0, _len = args.length; _i < _len; _i++) {
              elem = args[_i];
              try {
                type = exports.IOGType.FindType(elem);
              } catch (error) {
                continue;
              }
              if ((type != null)) {
                rez.push(type);
              }
            }
          }
        }
        return rez;
      };

      ServerContext.ExtractType = function(object) {
        var customAttributes, enumValues, genericArguments, genericType, id, interfaces, isCollectionType, isDictionaryType, isEnum, isGenericType, isInterface, isScalar, name, objectProperties, properties, type;
        id = this.GetValue(object, exports.TypeConstants.ID);
        name = this.GetValue(object, exports.TypeConstants.Name);
        isCollectionType = this.GetValue(object, exports.TypeConstants.IsCollectionType);
        isDictionaryType = this.GetValue(object, exports.TypeConstants.IsDictionaryType);
        isInterface = this.GetValue(object, exports.TypeConstants.IsInterface);
        isEnum = this.GetValue(object, exports.TypeConstants.IsEnum);
        isGenericType = this.GetValue(object, exports.TypeConstants.IsGenericType);
        customAttributes = this.GetValue(object, exports.TypeConstants.CustomAttributes);
        interfaces = this.GetValue(object, exports.TypeConstants.Interfaces);
        enumValues = this.GetValue(object, exports.TypeConstants.EnumValues);
        genericArguments = ServerContext.ExtractGenericArguments(object);
        isScalar = this.GetValue(object, exports.TypeConstants.IsScalar);
        genericType = this.GetValue(object, exports.TypeConstants.GenericType);
        objectProperties = this.GetValue(object, exports.TypeConstants.Properties);
        type = new exports.IOGType(id, name, isCollectionType, isDictionaryType, isInterface, isEnum, isGenericType, genericType, customAttributes);
        if ((objectProperties != null) && !objectProperties.length <= 0) {
          properties = ServerContext.ExtractProperties(objectProperties, type);
        } else {
          properties = [];
        }
        type.properties = properties;
        type.interfaces = interfaces;
        type.enumValues = enumValues;
        type.genericArguments = genericArguments;
        type.isScalar = isScalar;
        return type;
      };

      ServerContext.ExtractProperties = function(object, decleringTypeParam) {
        var canRead, canWrite, customAttributes, decleringType, eleme, isStatic, name, pro, propertyType, result, tempDecleringType, tempProperty, _i, _len;
        if (decleringTypeParam == null) {
          decleringTypeParam = null;
        }
        result = [];
        for (_i = 0, _len = object.length; _i < _len; _i++) {
          eleme = object[_i];
          canRead = this.GetValue(eleme, exports.ProperiteConstants.CanRead);
          canWrite = this.GetValue(eleme, exports.ProperiteConstants.CanWrite);
          name = this.GetValue(eleme, exports.ProperiteConstants.Name);
          isStatic = this.GetValue(eleme, exports.ProperiteConstants.IsStatic);
          customAttributes = this.GetValue(eleme, exports.ProperiteConstants.CustomAttributes);
          tempProperty = ServerContext.ExtractPropertyNameType(this.GetValue(eleme, exports.ProperiteConstants.PropertyType));
          propertyType = tempProperty;
          tempDecleringType = ServerContext.ExtractPropertyNameType(this.GetValue(eleme, exports.ProperiteConstants.DeclaringType));
          decleringType = tempDecleringType;
          pro = new exports.PropertyInfo(canRead, canWrite, decleringType, name, propertyType, isStatic, customAttributes);
          result.push(pro);
        }
        return result;
      };

      ServerContext.ExtractPropertyNameType = function(object) {
        var argument, genericArgumentProxy, genericArguments, genericArgumentsProxies, nameOfType, propertyType, _i, _len;
        if (object === null) {
          return null;
        }
        if (!object.hasOwnProperty(ServerContext.NAME_OF_TYPE) || !object.hasOwnProperty(ServerContext.GENERIC_ARGUMENTS_TYPE_NAME)) {
          return null;
        }
        nameOfType = object[ServerContext.NAME_OF_TYPE];
        genericArguments = object[ServerContext.GENERIC_ARGUMENTS_TYPE_NAME];
        genericArgumentsProxies = [];
        for (_i = 0, _len = genericArguments.length; _i < _len; _i++) {
          argument = genericArguments[_i];
          genericArgumentProxy = ServerContext.ExtractPropertyNameType(argument);
          genericArgumentsProxies.push(genericArgumentProxy);
        }
        propertyType = new exports.TypeProxy(nameOfType, genericArgumentsProxies);
        return propertyType;
      };

      ServerContext.NodeParser = function(object) {
        var dataObject, edgeDataKey, edgeValeu, edgesSortedList, element, key, newKey, node, value, valueParsed, valuesDictionary, _i, _len, _ref, _ref1;
        valuesDictionary = new exports.Dictionary();
        _ref = object[ServerContext.VALUES];
        for (key in _ref) {
          if (!__hasProp.call(_ref, key)) continue;
          value = _ref[key];
          valueParsed = ServerContext.ObjectWrapperParse(value);
          newKey = new exports.Guid(key);
          if (exports.UTILS.equals(newKey, exports.Guid.EMPTY)) {
            continue;
          }
          valuesDictionary.Add(newKey, valueParsed);
        }
        edgesSortedList = new exports.SortedList();
        _ref1 = object[ServerContext.EDGES];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          element = _ref1[_i];
          key = element[ServerContext.KEY];
          value = element[ServerContext.VALUE];
          edgeDataKey = ServerContext.EdgeDataParse(key);
          edgeValeu = ServerContext.EdgeParse(value);
          edgesSortedList.Add(edgeDataKey, edgeValeu);
        }
        dataObject = ServerContext.ObjectWrapperParse(object[ServerContext.DATA], object[ServerContext.NODE_TYPE]);
        node = new exports.Node(object[ServerContext.NODE_TYPE], dataObject, edgesSortedList, valuesDictionary);
        node.previous = new exports.Guid(object[ServerContext.PREVIOUS]);
        node.commited = object[ServerContext.COMMITED];
        return node;
      };

      ServerContext.EdgeParse = function(object) {
        var edge, unparsedEdge;
        if (!(object != null) || !(object.hasOwnProperty(ServerContext.TO_NODE_ID) && object.hasOwnProperty(ServerContext.DATA))) {
          return null;
        }
        unparsedEdge = new exports.Guid(object[ServerContext.TO_NODE_ID]);
        edge = new exports.Edge(unparsedEdge, ServerContext.EdgeDataParse(object[ServerContext.DATA]));
        return edge;
      };

      ServerContext.EdgeDataParse = function(object) {
        var edgeData;
        edgeData = new exports.EdgeData();
        edgeData.semantic = object[ServerContext.SEMANTIC];
        edgeData.flags = object[ServerContext.FLAGS];
        edgeData.data = ServerContext.ObjectWrapperParse(object[ServerContext.DATA]);
        return edgeData;
      };

      ServerContext.ObjectWrapperParse = function(object, nodeType) {
        var enumeration, key, tempRez, typeProxy, value, _ref;
        if (!(object != null) || !(object.hasOwnProperty(ServerContext.TYPE_NAME) && object.hasOwnProperty(ServerContext.DATA))) {
          return null;
        }
        if (!(object[ServerContext.TYPE_NAME] != null)) {
          return null;
        }
        if (!(object[ServerContext.TYPE_NAME][ServerContext.NAME_OF_TYPE] != null)) {
          return null;
        }
        if (nodeType === exports.NodeType.Type) {
          typeProxy = ServerContext.ExtractPropertyNameType(object[ServerContext.TYPE_NAME]);
          return typeProxy.GetType();
        }
        switch (object[ServerContext.TYPE_NAME][ServerContext.NAME_OF_TYPE]) {
          case exports.ScalarName.String:
            tempRez = new exports.IOGString(object[ServerContext.DATA]);
            return tempRez;
          case exports.ScalarName.Guid:
            tempRez = new exports.Guid(object[ServerContext.DATA]);
            return tempRez;
          case exports.ScalarName.Int32:
            tempRez = new exports.Int32(object[ServerContext.DATA]);
            return tempRez;
          case exports.ScalarName.Int64:
            tempRez = new exports.Int64(object[ServerContext.DATA]);
            return tempRez;
          case exports.ScalarName.Double:
            tempRez = new exports.Double(object[ServerContext.DATA]);
            return tempRez;
          case exports.ScalarName.Boolean:
            tempRez = new exports.IOGBoolean(object[ServerContext.DATA]);
            return tempRez;
          case exports.ScalarName.Byte:
            tempRez = new exports.Byte(object[ServerContext.DATA]);
            return tempRez;
          case exports.ScalarName.Char:
            tempRez = new exports.Char(object[ServerContext.DATA]);
            return tempRez;
          case exports.ScalarName.DateTime:
            tempRez = new DateTime(object[ServerContext.DATA]);
            tempRez[ServerContext.IOG_TYPE] = window.DateTimeType;
            return tempRez;
          case exports.ScalarName.TimeSpan:
            tempRez = new TimeSpan(object[ServerContext.DATA]);
            tempRez[ServerContext.IOG_TYPE] = exports.TimeSpanType;
            return tempRez;
          default:
            enumeration = null;
            _ref = exports.enums;
            for (key in _ref) {
              value = _ref[key];
              if (key === object[ServerContext.TYPE_NAME][ServerContext.NAME_OF_TYPE]) {
                enumeration = value;
                break;
              }
            }
            if ((enumeration != null) && (enumeration.type != null)) {
              tempRez = enumeration.fromInt(object[ServerContext.DATA]);
              return tempRez;
            }
            throw "Type is not supported!";
        }
      };

      return ServerContext;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.Workspace = (function() {

      function Workspace(snapshotId, timeout, nodeProvider, workspaceFacade, proxyCreatorService, typesService, isolationLevel, immutableProxyMap) {
        var isolatedStorage, rootObjectId, rootType;
        this.snapshotId = snapshotId;
        this.timeout = timeout;
        this.nodeProvider = nodeProvider;
        this.workspaceFacade = workspaceFacade;
        this.proxyCreatorService = proxyCreatorService;
        this.typesService = typesService;
        this.isolationLevel = isolationLevel;
        this.immutableProxyMap = immutableProxyMap;
        this.workspaceId = exports.Guid.Create();
        this.mutableProxyMap = new exports.LimitedProxyMap();
        this.workspaceFacade.OpenWorkspace(this.workspaceId, this.snapshotId, this.isolationLevel, this.timeout);
        if (this.isolationLevel === exports.IsolationLevel.ReadOnly) {
          this.objectInstancesService = new exports.ObjectInstancesService(this.nodeProvider, this.typesService);
          this.immutableInstancesService = new exports.ObjectInstancesService(this.nodeProvider, this.typesService);
          this.collectionInstancesService = new exports.CollectionInstancesService(this.nodeProvider, this.typesService);
          this.dictionaryInstancesService = new exports.DictionaryInstancesService(this.nodeProvider, this.typesService);
        } else {
          isolatedStorage = new exports.DirectNodeProvider(new exports.MemoryStorage());
          this.isolatedProvider = new exports.IsolatedNodeProvider(this.nodeProvider, isolatedStorage);
          this.objectInstancesService = new exports.ObjectInstancesService(this.isolatedProvider, this.typesService);
          this.immutableInstancesService = new exports.ObjectInstancesService(this.isolatedProvider, this.typesService);
          this.collectionInstancesService = new exports.CollectionInstancesService(this.isolatedProvider, this.typesService);
          this.dictionaryInstancesService = new exports.DictionaryInstancesService(this.isolatedProvider, this.typesService);
        }
        this.runtimeProxyFacade = new exports.RuntimeProxyFacade(this.typesService, this.objectInstancesService, this.immutableInstancesService, this.collectionInstancesService, new exports.CollectionInstancesService(this.nodeProvider, this.typesService), this.dictionaryInstancesService, new exports.DictionaryInstancesService(this.nodeProvider, this.typesService), this.mutableProxyMap, immutableProxyMap, this.proxyCreatorService);
        rootObjectId = this.workspaceFacade.GetRootObjectId(snapshotId);
        rootType = this.workspaceFacade.GetRootType();
        this.rootProxy = proxyCreatorService.NewObject(this.runtimeProxyFacade, rootObjectId, isolationLevel === exports.IsolationLevel.ReadOnly, rootType, null);
        if (this.isolationLevel === exports.IsolationLevel.ReadOnly) {
          this.immutableProxyMap.AddProxy(rootObjectId, this.rootProxy);
        } else {
          this.mutableProxyMap.AddProxy(rootObjectId, this.rootProxy);
        }
      }

      Workspace.prototype.Data = function() {
        return this.rootProxy;
      };

      Workspace.prototype.SnapshotId = function() {
        return this.snapshotId;
      };

      Workspace.prototype.New = function(type, genericTypes) {
        var instanceId, proxy, typeId;
        if (genericTypes == null) {
          genericTypes = [];
        }
        typeId = this.typesService.GetTypeIdCached(type);
        if (exports.UTILS.equals(typeId, exports.Guid.EMPTY)) {
          throw "Type not registered:" + type.name;
        }
        instanceId = exports.Guid.EMPTY;
        if (this.typesService.IsDictionaryType(typeId)) {
          instanceId = this.dictionaryInstancesService.NewInstance(typeId);
        } else {
          if (this.typesService.IsCollectionType(typeId)) {
            instanceId = this.collectionInstancesService.NewInstance(typeId);
          } else {
            instanceId = this.objectInstancesService.NewInstance(typeId);
          }
        }
        proxy = this.proxyCreatorService.NewObject(this.runtimeProxyFacade, instanceId, false, type);
        this.mutableProxyMap.AddProxy(instanceId, proxy);
        return proxy;
      };

      Workspace.prototype.Spawn = function(revisionId) {
        throw "Revision is not implemented!";
      };

      Workspace.prototype.SpawnImmutable = function(revisionId, type) {
        throw "Revision is not implemented!";
      };

      Workspace.prototype.ImmutableView = function(instance, type) {
        var id, proxy, result;
        id = exports.UTILS.GetItemId(instance);
        if (this.isolatedProvider.GetNodeState(id) === exports.NodeState.Created) {
          throw "Operation not allowed for uncommited instance";
        }
        proxy = null;
        result = this.immutableProxyMap.TryGetProxy(id);
        if (!result["result"]) {
          proxy = proxyCreatorService.NewObject(runtimeProxyFacade, id, true, type);
          immutableProxyMap.AddProxy(id, proxy);
        }
        return proxy;
      };

      Workspace.prototype.InstanceRevisionId = function(instance) {
        return exports.UTILS.GetItemId(instance);
      };

      Workspace.prototype.SetImmutable = function(instance, propertyName) {
        var instanceId;
        instanceId = exports.UTILS.GetItemId(instance);
        this.objectInstancesService.SetImmutable(instanceId, this.typesService.GetTypeMemberId(this.typesService.GetInstanceTypeId(instanceId), propertyName));
      };

      Workspace.prototype.Commit = function() {
        var changeSet, isolatedChanges;
        if (this.isolationLevel === exports.IsolationLevel.ReadOnly) {
          throw "Invalid commit operation in Read only isolation";
        }
        isolatedChanges = this.isolatedProvider.GetChanges(this.snapshotId);
        changeSet = this.workspaceFacade.Commit(this.workspaceId, isolatedChanges);
        this.mutableProxyMap.UpgradeProxies(changeSet.mapping);
        this.isolatedProvider.Clear();
        this.snapshotId = changeSet.resultSnapshotId;
        return this.snapshotId;
      };

      Workspace.prototype.Rollback = function() {
        var item, newInstances, _i, _len, _ref;
        if (this.isolationLevel === exports.IsolationLevel.ReadOnly) {
          throw "Invalid rollback operation in Read only isolation";
        }
        newInstances = new exports.Dictionary();
        _ref = this.isolatedProvider.EnumerateChanges();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (this.isolatedProvider.GetNodeState(item) === exports.NodeState.Created) {
            newInstances.Add(exports.UTILS.GetItemId(item), item);
          }
        }
        this.mutableProxyMap.InvalidateProxies(newInstances);
        return this.isolatedProvider.Clear();
      };

      Workspace.prototype.Update = function(newSnapshotId) {
        var changedNodeId, mapping, typeId, _i, _len, _ref;
        if ((newSnapshotId != null)) {
          mapping = this.workspaceFacade.ChangesBetween(this.snapshotId, newSnapshotId);
          if (this.isolatedProvider !== null) {
            _ref = this.isolatedProvider.EnumerateChanges();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              changedNodeId = _ref[_i];
              if (mapping.Contains(changedNodeId)) {
                typeId = exports.Guid.Empty;
                try {
                  typeId = this.typesService.GetInstanceTypeId(changedNodeId);
                } catch (error) {
                  throw "ConcurrentModificationException()";
                }
                throw "ConcurrentModificationException()";
              }
            }
          }
          this.mutableProxyMap.UpgradeProxies(mapping);
          this.snapshotId = newSnapshotId;
          this.workspaceFacade.UpdateWorkspace(this.workspaceId, this.snapshotId);
        } else {
          newSnapshotId = this.workspaceFacade.LastSnapshotId();
          return this.Update(newSnapshotId);
        }
      };

      Workspace.prototype.TryUpdate = function(newSnapshotId) {
        var changedNodeId, mapping, _i, _len, _ref;
        if (newSnapshotId == null) {
          newSnapshotId = null;
        }
        if ((newSnapshotId != null)) {
          mapping = this.workspaceFacade.ChangesBetween(snapshotId, newSnapshotId);
          if (this.isolatedProvider !== null) {
            _ref = isolatedProvider.EnumerateChanges();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              changedNodeId = _ref[_i];
              if (mapping.Contains(changedNodeId)) {
                return false;
              }
            }
          }
          this.mutableProxyMap.UpgradeProxies(mapping);
          this.snapshotId = newSnapshotId;
          this.workspaceFacade.UpdateWorkspace(this.workspaceId, this.snapshotId);
          return true;
        } else {
          newSnapshotId = this.workspaceFacade.LastSnapshotId();
          return this.TryUpdate(newSnapshotId);
        }
      };

      Workspace.prototype.CreateSubscription = function(instance, del, propertyName, notifyChangesFromSameWorkspace) {
        if (propertyName == null) {
          propertyName = null;
        }
        if (notifyChangesFromSameWorkspace == null) {
          notifyChangesFromSameWorkspace = false;
        }
        return this.workspaceFacade.CreateSubscription(this.workspaceId, exports.UTILS.GetItemId(instance), propertyName, notifyChangesFromSameWorkspace, del);
      };

      Workspace.prototype.RemoveSubscription = function(subscription) {
        return this.workspaceFacade.RemoveSubscription(subscription.subscriptionId, subscription.workspaceId);
      };

      Workspace.prototype.SubWorkspace = function(del) {
        throw "Not implemented";
      };

      Workspace.prototype.ClearWorkspace = function() {
        this.Rollback();
        return this.Update();
      };

      Workspace.prototype.CloseWorkspace = function() {
        this.workspaceFacade.CloseWorkspace(this.workspaceId);
        this.mutableProxyMap.InvalidateProxies();
        exports.UTILS.SetItemId(this.rootProxy, exports.Guid.EMPTY);
        return this.rootProxy = null;
      };

      Workspace.prototype.ChangeIsolationLevel = function(newIsolationLevel) {
        if (isolationLevel === exports.IsolationLevel.ReadOnly) {
          throw new ArgumentException("Cannot change isolation level for read only workspace.");
        }
        this.isolationLevel = newIsolationLevel;
        return this.workspaceFacade.ChangeWorkspaceIsolationLevel(workspaceId, newIsolationLevel);
      };

      return Workspace;

    })();
  });

  namespace(execom.iog.name, function(exports) {
    return exports.ClientContext = (function() {
      var VALUE;

      VALUE = 'value';

      function ClientContext(hostname, serviceName, localStorage) {
        var tempDefaultWorkspaceTimeout, tempSnapshotIsolationEnabled;
        this.hostname = hostname;
        this.serviceName = serviceName;
        this.localStorage = localStorage != null ? localStorage : new exports.DirectNodeProvider();
        this.snapshotIsolationEnabled = null;
        tempSnapshotIsolationEnabled = null;
        this.serverContext = new exports.ServerContext(this.hostname, this.serviceName);
        this.snapshotIsolationEnabled = this.serverContext.SnapshotIsolationEnabled();
        this.defaultWorkspaceTimeout = null;
        tempDefaultWorkspaceTimeout = null;
        this.defaultWorkspaceTimeout = this.serverContext.DefaultWorkspaceTimeout();
        this.immutableProxyMap = new exports.LimitedProxyMap(exports.IOGSettings.ObjectCacheMinimumCount, exports.IOGSettings.ObjectCacheMaximumCount);
        this.provider = new exports.CachedReadNodeProvider(this.serverContext, this.localStorage);
        this.generationService = null;
        this.InitializeServices();
      }

      ClientContext.prototype.InitializeServices = function() {
        var completeTypesList, interfaceToGeneratedMapping, interfaceToTypeIdMapping;
        this.typesService = new exports.TypesService(this.provider);
        exports.types = [];
        this.serverContext.EntityTypes();
        interfaceToTypeIdMapping = this.typesService.InitializeTypeSystem(window.types);
        completeTypesList = interfaceToTypeIdMapping.Keys();
        this.generationService = new exports.GenerationService(this.typesService);
        interfaceToGeneratedMapping = this.generationService.GenerateProxyTypes(completeTypesList);
        this.proxyCreatorService = new exports.ProxyCreatorService(completeTypesList, interfaceToTypeIdMapping, interfaceToGeneratedMapping);
        exports.StaticProxyFacade.Initialize(this.typesService);
      };

      ClientContext.prototype.Backup = function(storage, snapshotId) {
        if (snapshotId == null) {
          snapshotId = "";
        }
        throw "Not implemented!";
      };

      ClientContext.prototype.Cleanup = function() {
        throw "Not implemented!";
      };

      ClientContext.prototype.ExpireWorkspaces = function() {
        throw "Not implemented!";
      };

      ClientContext.prototype.LastSnapshotId = function() {
        return this.serverContext.LastSnapshotId().value;
      };

      ClientContext.prototype.OpenWorkspace = function(isolationLevel, snapshotId, timeout) {
        var defaultSnapshotId, defaultWorkspaceTimeout, lastSnapshotId;
        if (snapshotId == null) {
          snapshotId = null;
        }
        if (timeout == null) {
          timeout = null;
        }
        defaultWorkspaceTimeout = null;
        defaultSnapshotId = null;
        if (!(snapshotId != null) && !(timeout != null)) {
          defaultWorkspaceTimeout = this.defaultWorkspaceTimeout;
          defaultSnapshotId = this.serverContext.LastSnapshotId();
        }
        if ((snapshotId != null) && !(timeout != null)) {
          if (!snapshotId.hasOwnProperty(exports.ClientContext.VALUE)) {
            snapshotId = new exports.Guid(snapshotId);
          }
          defaultSnapshotId = snapshotId;
          defaultWorkspaceTimeout = this.defaultWorkspaceTimeout;
        }
        if (!(snapshotId != null) && (timeout != null)) {
          defaultWorkspaceTimeout = timeout;
          if (!this.snapshotIsolationEnabled && isolationLevel === exports.IsolationLevel.Snapshot) {
            throw "Snapshot isolation level disabled by configuration";
          }
          if (isolationLevel === exports.IsolationLevel.Exclusive) {
            this.serverContext.EnterExclusiveLock();
          }
          snapshotId = this.serverContext.LastSnapshotId();
          return new exports.Workspace(snapshotId, defaultWorkspaceTimeout, this.provider, this.serverContext, this.proxyCreatorService, this.typesService, isolationLevel, this.immutableProxyMap);
        }
        if (!this.snapshotIsolationEnabled && isolationLevel === exports.IsolationLevel.Snapshot) {
          throw "Snapshot isolation level disabled by configuration";
        }
        if (isolationLevel === exports.IsolationLevel.Exclusive) {
          this.serverContext.EnterExclusiveLock();
          lastSnapshotId = this.serverContext.LastSnapshotId();
          if (!exports.UTILS.equals(defaultSnapshotId, lastSnapshotId)) {
            throw "Snapshot other than the last snapshot cannot be opened for exclusive write.";
          }
        }
        return new exports.Workspace(defaultSnapshotId, defaultWorkspaceTimeout, this.provider, this.serverContext, this.proxyCreatorService, this.typesService, isolationLevel, this.immutableProxyMap);
      };

      ClientContext.prototype.UpdateWorkspaceToExclusive = function(workspace) {
        this.serverContext.EnterExclusiveLock();
        workspace.Update();
        return workspace.ChangeIsolationLevel(exports.IsolationLevel.Exclusive);
      };

      ClientContext.prototype.UpdateWorkspaceToSnapshot = function(workspace) {
        this.serverContext.ExitExclusiveLock();
        return workspace.ChangeIsolationLevel(exports.IsolationLevel.Snapshot);
      };

      return ClientContext;

    })();
  });

}).call(this);
