<#@ template language="C#" #>
digraph g{
	
	rankdir = LR;
	node [shape=record];
	edge [arrowhead=open,minlen = 2, labeldistance = 2];
	<#
		foreach(TypeVisualisationUnit unit in typeUnits)
		{
	#>
	<#=unit.Name#>Node [label="<p1><#=unit.Name#>|<#
		for(int i = 0; i < unit.PropertyScalarNames.Count; i++)
		{
			string propertyTypeName = unit.PropertyScalarTypes[i];
			propertyTypeName = propertyTypeName.Replace("<","\\<");
			propertyTypeName = propertyTypeName.Replace(">","\\>");
			if(i == 0)
			{
			#><p2><#
			}
			#>+ <#=unit.PropertyScalarNames[i]#> : <#=propertyTypeName#> <#

				PropertyAttribute attribute = unit.PropertyScalarAttributes[i];
				if(attribute == PropertyAttribute.PrimaryKeyAndImmutableProperty)
				{
					#>[PK][IM]<#
				} else if(attribute == PropertyAttribute.PrimaryKeyProperty)
				{
					#>[PK]<#
				} else if(attribute == PropertyAttribute.ImmutableProperty)
				{
					#>[IM]<#
				}

			#>\l<#
		}
		if(unit.PropertyScalarNames.Count == 0)
		{
		#>\n<#
		}#>"];

	<#
		}

		foreach(TypeVisualisationUnit unit in typeUnits)
		{
			for(int i = 0; i < unit.PropertyNonScalarNames.Count; i++)
			{
				string propertyTypeName = unit.PropertyNonScalarTypes[i];
				Boolean isCollection;
				if (propertyTypeName.StartsWith("ICollection<") || propertyTypeName.StartsWith("IIndexedCollection<")
                            || propertyTypeName.StartsWith("IOrderedCollection<") || propertyTypeName.StartsWith("IScalarSet<"))
                        {
							isCollection = true;
							propertyTypeName = propertyTypeName.Substring(propertyTypeName.IndexOf("<") + 1,
                                propertyTypeName.LastIndexOf(">") - propertyTypeName.IndexOf("<") - 1);
						}
				else if(propertyTypeName.StartsWith("IDictionary<"))
					{
						isCollection = true;
						propertyTypeName = propertyTypeName.Substring(propertyTypeName.IndexOf(",") + 1,
                                propertyTypeName.IndexOf(">") - propertyTypeName.IndexOf(",") - 1);
					}
				else
					{
						isCollection = false;
					}
				
				#><#=unit.Name#>Node -> <#=propertyTypeName#>Node [label="<#=unit.PropertyNonScalarNames[i]#><#
					
					PropertyAttribute attribute = unit.PropertyNonScalarAttributes[i];
					if(attribute == PropertyAttribute.PrimaryKeyAndImmutableProperty)
					{
						#>[PK][IM]",color="red<#
					} else if(attribute == PropertyAttribute.PrimaryKeyProperty)
					{
						#>[PK]<#
					} else if(attribute == PropertyAttribute.ImmutableProperty)
					{
						#>[IM]",color="red<#
					}
				
				#>",headlabel=<#
					
					if(isCollection)
					{
					 #>"*"<#
					}else
					{
					 #>"1"<#
					}
				  #>];
			<#}	
		}
	#>


}